const codeStringComponentUi = {
  "Accordion": "import IconChevronToggle from \"@assets/icons/IconChevronToggle\";\r\nimport { cn } from \"@lib/utils/helper\";\r\nimport { TItemAccordion } from \"@types\";\r\nimport { useState } from \"react\";\r\n\r\ninterface TProps {\r\n  items: TItemAccordion[];\r\n  customeClass?: {\r\n    containerItems?: string;\r\n    container?: string;\r\n    containerLabel?: string;\r\n    containerContent?: string;\r\n  }\r\n}\r\n\r\nconst Accordion = (props: TProps) => {\r\n  const { items, customeClass } = props\r\n  return (\r\n    <div className={cn({\r\n      \"flex flex-col gap-2\": true,\r\n      [customeClass?.container || \"\"]: customeClass?.container,\r\n    })}>\r\n      {\r\n        items?.map((item, i) => (\r\n          <Floating key={i} {...item} customeClass={customeClass} />\r\n        ))\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\ntype TFloatingProps = TItemAccordion & Pick<TProps, \"customeClass\">\r\n\r\nexport const Floating = (props: TFloatingProps) => {\r\n  const { label, content, customeClass } = props\r\n\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  const handleToggleAccordion = () => {\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n  return (\r\n    // Container\r\n    <div className={cn({\r\n      'flex flex-col gap-2 gap w-full border-b py-2': true,\r\n      [customeClass?.containerItems || '']: customeClass?.containerItems\r\n    })}>\r\n\r\n      {/* Container Label */}\r\n      <div className={cn({\r\n        'flex items-center w-full font-medium  justify-between': true,\r\n        [customeClass?.containerLabel || '']: customeClass?.containerLabel\r\n      })}>\r\n        {label}\r\n        <div className=\"cursor-pointer-custome\" onClick={() => handleToggleAccordion()}>\r\n          <div className=\"box-shadow-1 rounded-full\">\r\n            <IconChevronToggle isOpen={isOpen} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Container Content */}\r\n      <div className={cn({\r\n        \"transition-all duration-100 ease\": true,\r\n        \"opacity-100 max-h-[10rem]\": isOpen,\r\n        \"opacity-0 max-h-0\": !isOpen,\r\n        [customeClass?.containerContent || \"\"]: customeClass?.containerContent\r\n      })}>\r\n        <p className=\"\">\r\n          {content}\r\n        </p>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Accordion\r\n\r\n",
  "Alert": "/* eslint-disable @typescript-eslint/ban-ts-comment */\r\nimport { IconClose, IconDanger, IconInfo, IconNotification, IconSuccess } from \"@assets/icons\"\r\nimport { cn } from \"@lib/utils/helper\"\r\nimport variantsAlert, { variantAlertError, variantAlertSuccess, variantAlertWarning } from \"@lib/utils/variants/ui/variant-alert\"\r\nimport variant from \"@lib/utils/variants/variant-color\"\r\nimport { VariantProps, cva } from \"class-variance-authority\"\r\nimport { HTMLProps, useEffect, useState } from \"react\"\r\n\r\n\r\ninterface TPropsVariantError extends VariantProps<typeof alertVariantError> {\r\n    type: 'error'\r\n}\r\ninterface TPropsVariantWarning extends VariantProps<typeof alertVariantWarning> {\r\n    type: 'warning'\r\n}\r\n\r\ninterface TPropsVariantSuccess extends VariantProps<typeof alertVariantSuccess> {\r\n    type: 'success'\r\n}\r\n\r\ninterface TPropsVariantGeneral extends VariantProps<typeof alertVariantGeneral> {\r\n    type?: 'notification' | 'info'\r\n}\r\n\r\nexport type TAlertProps = HTMLProps<HTMLButtonElement> & {\r\n    position?: \"top-left\" | \"top-right\" | 'bottom-left' | \"bottom-right\";\r\n    timeout?: number;\r\n    onDismiss?: () => void;\r\n    show: boolean;\r\n    autoClose?: boolean;\r\n    isFixed?: boolean;\r\n    withIcon?: boolean;\r\n    withCloseBtn?: boolean;\r\n    message: string | React.ReactNode;\r\n    customeIcon?: React.ReactNode;\r\n} & (TPropsVariantError | TPropsVariantWarning | TPropsVariantSuccess | TPropsVariantGeneral)\r\n\r\n\r\n\r\nconst Alert = (props: TAlertProps) => {\r\n    const { variant, customeIcon, type = 'info', withIcon, show, message, isFixed = true, withCloseBtn = false, autoClose = true, className = '', position = \"top-right\", timeout = 3000, onDismiss: handleOnDismiss } = props\r\n    const [isCloseAlert, setIsCloseAlert] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setIsCloseAlert(!show)\r\n    }, [show])\r\n\r\n\r\n    useEffect(() => {\r\n        if (timeout > 0 && autoClose && show) {\r\n            const timer = setTimeout(() => {\r\n                setIsCloseAlert(true)\r\n                handleOnDismiss && handleOnDismiss();\r\n            }, timeout);\r\n            return () => clearTimeout(timer);\r\n        }\r\n    }, [show]);\r\n\r\n    const getAlertVariant = () => {\r\n        switch (type) {\r\n            case 'error':\r\n                return alertVariantError;\r\n            case 'success':\r\n                return alertVariantSuccess;\r\n            case 'warning':\r\n                return alertVariantWarning;\r\n            case 'notification':\r\n            case 'info':\r\n                return alertVariantGeneral\r\n            default:\r\n                return alertVariantError; // Default to error variant if type is not specified or unrecognized\r\n        }\r\n    };\r\n\r\n    const paramsAlertVariant = { className, variant, position, isFixed }\r\n    const alertVariant = getAlertVariant()\r\n\r\n\r\n    return ((show && !isCloseAlert) || !isFixed) ? (\r\n        // @ts-expect-error\r\n        <div className={cn(alertVariant(paramsAlertVariant))}>\r\n            <div className={cn({\r\n                \"flex gap-3 w-full relative\": true,\r\n                \"pr-4\": withCloseBtn,\r\n            })}>\r\n                {\r\n                    withCloseBtn && <IconClose onClick={handleOnDismiss} className={cn({\r\n                        \"top-1 right-0 absolute  cursor-pointer-custome\": true,\r\n                        \"icon-warning\": type === \"warning\",\r\n                        \"icon-error\": type === \"error\",\r\n                        \"icon-success\": type === \"success\"\r\n                    })} />\r\n                }\r\n\r\n                {\r\n                    withIcon && <span className=\"mt-1\">\r\n                        {\r\n                            customeIcon ?? <>\r\n                                {type === \"info\" && <IconInfo className=\"icon-gray\" />}\r\n                                {type === \"warning\" && <IconInfo className=\"icon-warning \" />}\r\n                                {type === \"error\" && <IconDanger className=\"icon-error\" />}\r\n                                {type === \"success\" && <IconSuccess className=\"icon-success\" />}\r\n                                {type === \"notification\" && <IconNotification />}\r\n                            </>\r\n                        }\r\n\r\n\r\n                    </span>\r\n                }\r\n                {message}\r\n            </div>\r\n        </div>\r\n    ) : null\r\n}\r\n\r\n\r\nconst generalStyle = 'flex flex-shrink gap-3 px-3 py-2 border w-fit min-w-[15rem] rounded-md max-w-[20rem]'\r\n\r\n\r\n\r\nconst alertVariantError = cva(generalStyle, {\r\n    variants: {\r\n        ...variantsAlert,\r\n        variant: {\r\n            ...variantAlertError\r\n        },\r\n    },\r\n    defaultVariants: {\r\n        variant: \"error-soft\"\r\n    }\r\n})\r\n\r\nconst alertVariantSuccess = cva(generalStyle, {\r\n    variants: {\r\n        ...variantsAlert,\r\n        variant: {\r\n            ...variantAlertSuccess\r\n        },\r\n    },\r\n    defaultVariants: {\r\n        variant: \"success-soft\"\r\n    }\r\n})\r\n\r\nconst alertVariantWarning = cva(generalStyle, {\r\n    variants: {\r\n        ...variantsAlert,\r\n        variant: {\r\n            ...variantAlertWarning\r\n        },\r\n    },\r\n    defaultVariants: {\r\n        variant: \"warning-soft\"\r\n    }\r\n})\r\n\r\nconst alertVariantGeneral = cva(generalStyle, {\r\n    variants: {\r\n        ...variantsAlert,\r\n        variant: {\r\n            ...variant\r\n        },\r\n    },\r\n    defaultVariants: {\r\n        variant: \"solid-white\"\r\n    }\r\n})\r\n\r\nexport default Alert",
  "Avatar": "import Image from \"@components/ui/Image\";\r\nimport { cn } from \"@lib/utils/helper\";\r\nimport variantsAvatar from \"@lib/utils/variants/ui/variant-avatar\";\r\nimport { VariantProps, cva } from \"class-variance-authority\";\r\nimport { HTMLProps } from \"react\";\r\n\r\ninterface TPropsImage {\r\n    type: \"image\";\r\n    src: string;\r\n}\r\n\r\ninterface TInitialName {\r\n    type: \"initial-name\";\r\n    name: string;\r\n}\r\n\r\ntype TProps = Omit<Partial<HTMLProps<HTMLDivElement>>, \"size\" | \"shape\"> & VariantProps<typeof avatarVariants> & {\r\n    customeIcon?: React.ReactNode\r\n} & (TPropsImage | TInitialName)\r\n\r\n\r\nconst Avatar = (props: TProps) => {\r\n    const { className, type = \"image\", customeIcon, src, name, variant, size, shape, status } = props\r\n    let updateVariant = variant || \"soft-gray\"\r\n    if (!variant && type === \"image\") {\r\n        updateVariant = \"solid-black\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"relative\">\r\n            <div\r\n                className={cn(avatarVariants({ className, variant: updateVariant, size, shape, status }))}\r\n            >\r\n                {type === \"image\" && <Image src={src || \"avatar.svg\"} alt={name} className=\" w-full h-full object-scale-down\" />}\r\n                {type === \"initial-name\" && <div>{name?.substring(0, 1)}</div>}\r\n                {\r\n                    [\"online\", \"offline\", \"dontdistrub\", \"away\"]?.includes(status || \"\") && <span className={cn({\r\n                        \" absolute border-white border-2   rounded-full\": true,\r\n                    })}>\r\n                    </span>\r\n                }\r\n                {\r\n                    customeIcon && status === \"icon\" && <span className=\"absolute top-2 right-2\">{customeIcon}</span>\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst avatarVariants = cva(\r\n    'text-white flex  items-center justify-center w-fit font-semibold overflow-hidden [&>span]:top-0 [&>span]:right-0  [&>span]:w-[0.75rem]  [&>span]:h-[0.75rem]',\r\n    {\r\n        variants: variantsAvatar,\r\n        compoundVariants: [\r\n\r\n        ],\r\n        defaultVariants: {\r\n            variant: \"soft-gray\",\r\n            size: \"base\",\r\n            shape: \"circular\",\r\n        }\r\n    }\r\n)\r\n\r\nexport default Avatar",
  "Badge": "import { cn } from \"@lib/utils/helper\";\r\nimport variantBadge from \"@lib/utils/variants/ui/variant-badge\";\r\nimport { VariantProps, cva } from \"class-variance-authority\";\r\nimport React, { HTMLProps } from \"react\";\r\n\r\ninterface TProps extends Omit<Partial<HTMLProps<HTMLDivElement>>, \"size\" | \"shape\" | \"label\">, VariantProps<typeof badgeVariants> {\r\n  customeElement?: React.ReactNode;\r\n  label: string | React.ReactNode;\r\n\r\n}\r\n\r\nconst Badge = (props: TProps) => {\r\n  const { label, className, variant, customeElement, shape, size, ...attrs } = props\r\n  return (\r\n    <span className={`${cn(badgeVariants({ className, variant, shape, size }))}`} {...attrs}>\r\n      {label}\r\n      {customeElement}\r\n    </span>\r\n  )\r\n}\r\n\r\n\r\nconst badgeVariants = cva(\r\n  'w-fit font-medium bg-white h-fit text-white flex-inline gap-1 text-center font-medium rounded items-center justify-center',\r\n  {\r\n    variants: {\r\n      variant: variantBadge,\r\n      size: {\r\n        small: \"!text-[10px] px-2 py-1\",\r\n        base: \"!text-[12px] px-2 py-1\",\r\n        large: \"!text-[14px] px-3 py-2\"\r\n      },\r\n\r\n      shape: {\r\n        pilled: \"rounded-full\",\r\n        rounded: \"rounded-md\",\r\n        circle: \"rounded-full !aspect-square  flex items-center justify-center\"\r\n      },\r\n\r\n    },\r\n    compoundVariants: [\r\n      {\r\n        \"shape\": \"circle\",\r\n        size: \"base\",\r\n        className: \"min-w-[1.5rem] min-h-[1.5rem]\"\r\n      },\r\n      {\r\n        \"shape\": \"circle\",\r\n        size: \"small\",\r\n        className: \"min-w-[1.25rem] min-h-[1.25rem]\"\r\n      }\r\n    ],\r\n    defaultVariants: {\r\n      variant: \"soft-primary\",\r\n      size: \"base\",\r\n      shape: \"pilled\"\r\n    }\r\n  }\r\n)\r\n\r\n\r\nexport default Badge",
  "Breadcrumb": "\r\nimport { IconChevronRight } from \"@assets/icons\";\r\nimport { cn } from \"@lib/utils/helper\";\r\nimport { VariantProps, cva } from \"class-variance-authority\";\r\nimport { HTMLProps } from \"react\";\r\nimport Button from \"./Button\";\r\n\r\ninterface TProps extends HTMLProps<HTMLDivElement>, VariantProps<typeof breadcrumbVariants> {\r\n    items: {\r\n        url: string;\r\n        label: string | React.ReactNode;\r\n    }[];\r\n\r\n    customeIconDivider?: React.ReactNode;\r\n    withIconDivider?: boolean;\r\n    customeClass?: {\r\n        active?: string;\r\n        label?: string;\r\n    }\r\n\r\n    activeItem?: number;\r\n}\r\n\r\nconst Breadcrumb = (props: TProps) => {\r\n    const { className, items, customeIconDivider, activeItem, customeClass, withIconDivider = true, ...otherProps } = props;\r\n\r\n\r\n\r\n    return (\r\n        <div\r\n            className={cn(breadcrumbVariants({\r\n                className: `${className} ${!withIconDivider && \"gap-4\"}`\r\n            }))}\r\n            {...otherProps}\r\n        >\r\n\r\n            {\r\n                items?.map((item, i) => {\r\n\r\n                    const isActiveItem = location.pathname === item?.url || activeItem === i\r\n                    return <div key={i} className=\"flex items-center\">\r\n                        <Button key={i}\r\n                            label={\r\n                                <div className={cn({\r\n                                    \"flex \": true,\r\n                                    \"\": isActiveItem\r\n                                })}>\r\n                                    {item?.label}\r\n                                    {withIconDivider && <span className=\"px-2 flex items-center \">{(customeIconDivider ?? <IconChevronRight className=\"\" />)}</span>}\r\n                                </div>\r\n                            }\r\n                            className={cn({\r\n                                \"!p-0 !py-1 !flex\": true,\r\n                                [`!font-medium ${customeClass?.active || \"\"} `]: isActiveItem,\r\n                                [customeClass?.label || \"\"]: customeClass?.label\r\n                            })}\r\n                            variant={\"link-black\"}\r\n                            to={item?.url} />\r\n                    </div>\r\n                })\r\n            }\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nconst breadcrumbVariants = cva(\r\n    'flex gap-0',\r\n    {\r\n        variants: {\r\n            variant: {\r\n                // Define your variants here\r\n            },\r\n            // Add more variant options here\r\n        },\r\n        compoundVariants: [\r\n            // Define compound variants here\r\n        ],\r\n        defaultVariants: {\r\n            // Define default variants here\r\n        }\r\n    }\r\n)\r\n\r\nexport default Breadcrumb;\r\n",
  "Button": "import IconLoading from '@assets/icons/IconLoading';\r\nimport { cn } from '@lib/utils/helper';\r\nimport { variantButton } from '@lib/utils/variants/ui/variant-button';\r\nimport { VariantProps, cva } from 'class-variance-authority';\r\nimport { HTMLProps } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\ninterface TPropsLink {\r\n  to?: string;\r\n  target?: '_blank' | ''\r\n}\r\n\r\ntype TProps = Omit<Partial<HTMLProps<HTMLButtonElement | HTMLLinkElement>>, \"label\" | \"size\" | \"shape\">\r\n  & VariantProps<typeof buttonVariants>\r\n  & {\r\n    isLoading?: boolean;\r\n    label: React.ReactNode | string;\r\n    to?: string;\r\n  }\r\n  & (TPropsLink);\r\n\r\n\r\nconst Button = (props: TProps) => {\r\n  const { variant, size, shape, className, isLoading = false, label, ...attrs } = props\r\n\r\n  const CompButton = attrs?.to ? Link : \"button\" as React.ElementType\r\n\r\n  let updateVariant: TProps[\"variant\"] = variant || \"solid-primary\"\r\n  if (attrs?.to && !variant) {\r\n    updateVariant = \"link-primary\"\r\n  }\r\n\r\n  return (\r\n    <CompButton\r\n      {...attrs}\r\n      disabled={isLoading || attrs?.disabled}\r\n      className={cn(buttonVariants({ className, variant: updateVariant, size, shape, }))}\r\n    >\r\n      {\r\n        isLoading ? <span><IconLoading />Loading...</span> : label\r\n      }\r\n    </CompButton>\r\n\r\n  )\r\n}\r\n\r\n\r\n\r\nconst buttonVariants = cva(\r\n  'w-fit  gap-1 h-fit items-center  text-white justify-center font-medium flex gap-sm disabled:cursor-not-allowed  disabled:opacity-50 ',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        ...variantButton,\r\n      },\r\n      shape: {\r\n        \"rounded\": \"rounded-lg\",\r\n        \"circle\": \"rounded-full\"\r\n      },\r\n      size: {\r\n        \"small\": \"py-1 px-4 \",\r\n        \"base\": \"py-2 px-4 \",\r\n        \"medium\": \"py-3 px-4 text-[16px]\",\r\n        \"large\": \"py-4 px-5 text-[18px]\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"solid-primary\",\r\n      size: \"base\",\r\n      shape: \"rounded\"\r\n    },\r\n  },\r\n)\r\n\r\nexport default Button",
  "Card": "import { IconChevronRight } from \"@assets/icons\";\r\nimport Button from \"@components/ui/Button\";\r\nimport Image from \"@components/ui/Image\";\r\nimport { cn } from \"@lib/utils/helper\";\r\nimport { VariantProps, cva } from \"class-variance-authority\";\r\nimport React, { HTMLProps } from \"react\";\r\n\r\nexport interface TPropsCard extends Omit<Partial<HTMLProps<HTMLDivElement>>, \"title\" | \"children\" | \"content\">, VariantProps<typeof cardVariants> {\r\n    layout?: \"vertical\" | \"horizontal\";\r\n    variant?: \"top-bordered\" | \"centered-body\" | \"overlay\";\r\n    imageOverlay?: string;\r\n    header?: {\r\n        image?: string;\r\n        content?: React.ReactNode | string;\r\n    };\r\n    body?: {\r\n        title?: React.ReactNode | string;\r\n        subtitle?: React.ReactNode | string;\r\n        image?: string;\r\n        content?: React.ReactNode | string;\r\n    };\r\n    footer?: React.ReactNode | string;\r\n    link?: {\r\n        label?: string;\r\n        to?: string;\r\n    };\r\n    customeClass?: {\r\n        container?: string;\r\n        header?: {\r\n            image?: string;\r\n            content?: string;\r\n        };\r\n        body?: {\r\n            title?: string;\r\n            subtitle?: string;\r\n            image?: string;\r\n            content?: string;\r\n        };\r\n        footer?: string;\r\n    };\r\n    fit?: boolean;\r\n    isLoading?: boolean;\r\n}\r\n\r\nconst Card: React.FC<TPropsCard> = (props) => {\r\n    const { imageOverlay, ...attrs } = props\r\n    return (\r\n        props.variant === \"overlay\" ? <Image customeClassName={{ container: \"rounded-xl border\" }} src={imageOverlay || \"\"} overlay={{ content: <CardFill {...attrs} /> }} /> : <CardFill {...attrs} />\r\n\r\n    );\r\n};\r\nconst CardFill = (props: TPropsCard) => {\r\n    const {\r\n        layout = \"vertical\",\r\n        header,\r\n        body,\r\n        footer,\r\n        customeClass = {},\r\n        variant,\r\n        fit = true,\r\n        className,\r\n        link,\r\n        ...otherProps\r\n    } = props\r\n\r\n    return (\r\n        <div\r\n            className={cn(cardVariants({ layout, variant, fit }), customeClass.container, className)}\r\n            {...otherProps}\r\n        >\r\n            {header && (\r\n                <div\r\n                    className={cn(\"header\", customeClass.header?.content)}\r\n                >\r\n                    {header.content && (<div className=\"bg-gray-50 p-4 border-b\">{header.content}</div>)}\r\n                    {header.image && (<Image src={header.image} className={cn(\"image-header h-full w-full\", customeClass.header?.image)} />)}\r\n                </div>\r\n            )}\r\n\r\n            {body && (\r\n                <div className=\"p-4 flex flex-col gap-3 body\">\r\n                    {body.image && (\r\n                        <Image src={body.image} className={cn('h-[15rem]', customeClass.body?.image)} />\r\n                    )}\r\n                    {(body.title || body.subtitle) && (\r\n                        <div className=\"flex flex-col gap-2\">\r\n                            {body.title && (\r\n                                <div className={cn(\"body-title font-bold p-0 text-black text-body-large leading-none\", customeClass.body?.title)}>\r\n                                    {body.title}\r\n                                </div>\r\n                            )}\r\n                            {body.subtitle && <p className={cn(\" body-subtitle font-medium leading-none\", customeClass.body?.subtitle)}>{body.subtitle}</p>}\r\n                        </div>\r\n                    )}\r\n                    {body.content && (\r\n                        <div className={cn(\"body-content\", customeClass.body?.content)}>\r\n                            {body.content}\r\n                        </div>\r\n                    )}\r\n\r\n                    {link && (\r\n                        <div>\r\n                            <Button label={<div className=\"flex items-center\">Card Link <IconChevronRight className=\"icon-primary w-[1rem] mt-[0.1rem]\" /></div>} to={link?.to || \"\"} className=\"font-medium flex w-fit\" />\r\n                        </div>\r\n                    )\r\n                    }\r\n\r\n                </div>\r\n            )}\r\n\r\n            {footer && (\r\n                <div className={cn(\"mb-auto p-4 text-gray bg-gray-50\", customeClass.footer)}>\r\n                    {footer}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst cardVariants = cva(\r\n    'border rounded-xl flex overflow-hidden bg-white',\r\n    {\r\n        variants: {\r\n            layout: {\r\n                vertical: \"flex-col [&_.image-header]:h-[15rem]\",\r\n                horizontal: \"flex-row [&_.header]:min-h-full [&_.header]:min-w-[40%]\"\r\n            },\r\n            variant: {\r\n                \"overlay\": \"!bg-transparent !border-none [&_.body-subtitle]:text-white  [&_p]:text-white [&_div]:text-white\",\r\n                \"top-bordered\": \"border-t-[4px] border-t-primary  \",\r\n                \"centered-body\": '[&>div]:my-auto [&_.body-title]:text-center  [&_.body-subtitle]:text-center [&_.body-content_p]:text-center [&_.body-content]:text-center [&_.body-content_div]:text-center  [&_.body]:flex [&_.body]:flex-col [&_.body]:items-center [&_.body]:justify-center'\r\n            },\r\n            fit: {\r\n                true: \"w-fit\",\r\n                false: \"w-full\"\r\n            },\r\n        },\r\n        compoundVariants: [],\r\n        defaultVariants: {\r\n            layout: \"vertical\"\r\n        }\r\n    }\r\n);\r\n\r\nexport default Card;\r\n",
  "CarouselImage": "/* eslint-disable react/jsx-handler-names */\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { cn } from \"@lib/utils/helper\"; // Assuming you have this utility\r\nimport Button from \"@components/ui/Button\";\r\nimport { IconChevronLeft, IconChevronRight } from \"@assets/icons\";\r\nimport useMediaQuery from \"@hooks/useMediaQuery\";\r\n\r\ninterface CarouselProps {\r\n  items: React.ReactNode[];\r\n  className?: string;\r\n  itemsPerView?: {\r\n    sm?: number;\r\n    md?: number;\r\n    lg?: number;\r\n  };\r\n}\r\n\r\nconst CarouselImage: React.FC<CarouselProps> = ({ items, className, itemsPerView = { sm: 1, md: 1, lg: 1 } }) => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [itemWidth, setItemWidth] = useState(0);\r\n  const [load, setLoad] = useState(true);\r\n  const itemRefs = useRef<(HTMLDivElement | null)[]>([]);\r\n  const containerItemRef = useRef<HTMLDivElement | null>(null);\r\n  const { isMinLg, isMinMd } = useMediaQuery();\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      if (containerRef.current) {\r\n        const containerWidth = containerRef?.current?.offsetWidth || 0;\r\n        setItemWidth(containerWidth / handleGetItemsPerView());\r\n      }\r\n    };\r\n    setTimeout(() => {\r\n      handleResize();\r\n    }, 100);\r\n\r\n    setTimeout(() => {\r\n      setLoad(false);\r\n    }, 1500);\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      if (containerItemRef.current) {\r\n        const scrollLeft = containerItemRef.current.scrollLeft;\r\n        const newIndex = Math.round(scrollLeft / itemWidth);\r\n        setCurrentIndex(newIndex);\r\n      }\r\n    };\r\n\r\n    if (containerItemRef.current) {\r\n      containerItemRef?.current.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (containerItemRef.current) {\r\n        containerItemRef.current.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, [itemWidth]);\r\n\r\n  const handleGetItemsPerView = () => {\r\n    if (isMinLg && itemsPerView.lg) {\r\n      return Math.min(itemsPerView.lg, items.length); // Ensure itemsPerView doesn't exceed items.length\r\n    } else if (isMinMd && itemsPerView.md) {\r\n      return Math.min(itemsPerView.md, items.length);\r\n    } else {\r\n      return Math.min(itemsPerView.sm || 1, items.length);\r\n    }\r\n  };\r\n\r\n  const handlePrev = () => {\r\n    setCurrentIndex((prevIndex) => {\r\n      const newIndex = Math.max(prevIndex - 1, 0);\r\n      const scrollPosition = itemWidth * newIndex;\r\n      containerItemRef.current?.scrollTo({\r\n        left: scrollPosition,\r\n        behavior: \"smooth\",\r\n      });\r\n      return newIndex;\r\n    });\r\n  };\r\n\r\n  const handleNext = () => {\r\n    setCurrentIndex((prevIndex) => {\r\n      const newIndex = Math.min(prevIndex + 1, items.length - handleGetItemsPerView());\r\n      const scrollPosition = itemWidth * newIndex;\r\n      containerItemRef.current?.scrollTo({\r\n        left: scrollPosition,\r\n        behavior: \"smooth\",\r\n      });\r\n      return newIndex;\r\n    });\r\n  };\r\n\r\n  const handleClickGroupItem = (group: number) => {\r\n    const itemsPerViewCount = handleGetItemsPerView();\r\n    const itemsLength = items?.length || 0;\r\n    const isLastGroup = Math.ceil(itemsLength / itemsPerViewCount) === group + 1;\r\n    let updateIndex = group * itemsPerViewCount;\r\n\r\n    if (isLastGroup) {\r\n      const stepBack = itemsLength % itemsPerViewCount === 0 ? 0 : itemsPerViewCount - (itemsLength % itemsPerViewCount);\r\n      updateIndex -= stepBack;\r\n    }\r\n\r\n    setCurrentIndex(updateIndex);\r\n    itemRefs.current[updateIndex]?.scrollIntoView({ behavior: \"smooth\", block: \"nearest\", inline: \"start\" });\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"relative w-full h-full overflow-hidden\", className)} ref={containerRef}>\r\n      <div ref={containerItemRef} style={{ width: `${itemWidth * handleGetItemsPerView()}px` }} className={`relative !snap-x  h-full flex gap-2 overflow-x-scroll scrollbar-hidden ${!load && \"transition-left duration-500 ease-in-out\"} `}>\r\n        {items.map((item, index) => (\r\n          <div ref={(el) => (itemRefs.current[index] = el)} style={{ width: `${itemWidth}px` }} key={index} className=\"!snap-start\t flex flex-shrink-0 h-full bg-primary-100 justify-center items-center\">\r\n            {item}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <Button label={<IconChevronLeft className=\"icon-white w-[2rem] h-[2rem]\" />} variant=\"transparent\" onClick={handlePrev} className=\"absolute top-1/2 left-2 transform -translate-y-1/2\" disabled={currentIndex === 0} />\r\n\r\n      <Button label={<IconChevronRight className=\"icon-white w-[2rem] h-[2rem]\" />} variant=\"transparent\" onClick={handleNext} className=\"absolute top-1/2 right-2 transform -translate-y-1/2\" disabled={currentIndex >= items.length - handleGetItemsPerView()} />\r\n\r\n      <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 flex space-x-2 p-2\">\r\n        {Array.from({ length: Math.ceil(items.length / handleGetItemsPerView()) }).map((_, group) => {\r\n          let isCurrentGroup = group * handleGetItemsPerView() === currentIndex;\r\n          const isSpecialCase = items?.length % handleGetItemsPerView() !== 0;\r\n          const lastGroupIndex = Math.ceil(items.length / handleGetItemsPerView()) - 1;\r\n\r\n          if (isSpecialCase && group === lastGroupIndex) {\r\n            const stepBack = items?.length % handleGetItemsPerView() === 0 ? 0 : handleGetItemsPerView() - (items.length % handleGetItemsPerView());\r\n            const updateIndex = lastGroupIndex * handleGetItemsPerView() - stepBack;\r\n            if (updateIndex === currentIndex) {\r\n              isCurrentGroup = true;\r\n            }\r\n          }\r\n          return <Button key={group} label=\"\" variant=\"transparent\" className={`h-3 w-3 !p-0 rounded-full ${isCurrentGroup ? \"bg-white\" : \"bg-white/30\"}`} onClick={() => handleClickGroupItem(group)} />;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CarouselImage;\r\n",
  "CodeBlock": "import CopyText from '@components/ui/CopyText';\r\nimport ThreeDotMacBook from '@components/ui/ThreeDotMacBook';\r\nimport { TObject } from '@types';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\n\r\ntype TPropsCustomeStyle = {\r\n  pre?: TObject;\r\n  code?: TObject\r\n}\r\n\r\nconst customStyle = (customeStyle?: TPropsCustomeStyle) => ({\r\n  ...dark,\r\n  'pre[class*=\"language-\"]': {\r\n    ...dark['pre[class*=\"language-\"]'],\r\n    background: 'black',\r\n    maxHeight: \"20rem\",\r\n    minHeight: \"3.5rem\",\r\n    border: \"none\",\r\n    fontSize: \"16px\",\r\n    ...customeStyle?.pre\r\n  },\r\n  'code[class*=\"language-\"]': {\r\n    ...dark['code[class*=\"language-\"]'],\r\n    background: 'black',\r\n    ...customeStyle?.pre\r\n  },\r\n})\r\n\r\ninterface TProps {\r\n  codeString: string;\r\n  customeStyle?: TPropsCustomeStyle;\r\n  fileName?: string;\r\n}\r\n\r\nconst CodeBlock = (props: TProps) => {\r\n  const { codeString, fileName, customeStyle } = props\r\n  return (\r\n    <div className='relative  w-full '>\r\n      <ThreeDotMacBook />\r\n      <CopyText text={codeString} classText='hidden' classContainer={'absolute w-fit right-4 top-9 z-[5]'} />\r\n      <SyntaxHighlighter language=\"javascript\" style={customStyle(customeStyle)}>\r\n        {fileName ? `\\r\\n${codeString}` : codeString}\r\n      </SyntaxHighlighter>\r\n      {\r\n        fileName && <div className='absolute top-6 bg-primary-100 text-primary-700 font-medium border rounded-br-lg p-1'>\r\n          {fileName}\r\n        </div>\r\n      }\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeBlock;\r\n",
  "Container": "import { cn } from '@lib/utils/helper';\r\nimport { VariantProps, cva } from 'class-variance-authority';\r\nimport React from 'react';\r\n\r\n\r\n\r\n\r\ninterface TProps extends React.HTMLProps<HTMLDivElement>, VariantProps<typeof containerFlexVariants> {\r\n  children: React.ReactNode;\r\n  customElement?: \"ul\" | \"nav\" | \"body\" | \"main\" | 'form'\r\n}\r\n\r\n\r\nconst Container: React.FC<TProps> = (props) => {\r\n  const { children, className, variant, gap, fit, padding, typeComp, customElement, ...attrs } = props\r\n  const Component = customElement ?? 'div' as React.ElementType\r\n  return (\r\n    <Component className={cn(containerFlexVariants({ className, variant, gap, fit, padding, typeComp }))} {...attrs}>\r\n      {children}\r\n    </Component>\r\n  )\r\n}\r\n\r\nconst containerFlexVariants = cva(\r\n  'flex w-full flex-wrap md:flex-nowrap ',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        hcs: 'flex justify-center items-start',\r\n        hcc: 'flex justify-center items-center',\r\n        hce: 'flex justify-center items-end',\r\n        hss: 'flex justify-start items-start',\r\n        hsc: 'flex justify-start items-center',\r\n        hse: 'flex justify-start items-end',\r\n        hes: 'flex justify-start items-start',\r\n        hec: 'flex justify-start items-center',\r\n        hee: 'flex justify-start items-end',\r\n        hbs: 'flex justify-between items-start',\r\n        hbc: 'flex justify-between items-center',\r\n        hbe: 'flex justify-between items-end',\r\n        vcs: 'flex-col items-center justify-start',\r\n        vcc: 'flex-col items-center justify-center',\r\n        vce: 'flex-col items-center justify-end',\r\n        vss: 'flex-col items-start justify-start',\r\n        vsc: 'flex-col items-start justify-center',\r\n        vse: 'flex-col items-start justify-end',\r\n        ves: 'flex-col items-end justify-start',\r\n        vec: 'flex-col items-end justify-center',\r\n        vee: 'flex-col items-end justify-end',\r\n      },\r\n      fit: {\r\n        \"true\": \"w-fit\",\r\n        \"false\": \"w-full\"\r\n      },\r\n      gap: {\r\n        'tiny': \"gap-1\",\r\n        'small': \"gap-2\",\r\n        'base': \"gap-4\",\r\n        'medium': \"gap-6\",\r\n        'large': \"gap-8\",\r\n        'xl': \"gap-16\"\r\n      },\r\n\r\n      padding: {\r\n        'small': \"p-2 w-[calc(100%-0.50rem)]\",\r\n        'base': \"p-4 w-[calc(100%-1rem)]\",\r\n        'medium': \"p-6 w-[calc(100%-1.5rem)]\",\r\n        'large': \"p-8 w-[calc(100%-2rem)]\",\r\n        'xl': \"p-16 w-[calc(100%-4rem)]\"\r\n      },\r\n      typeComp: {\r\n        'page': 'min-h-screen h-screen',\r\n        'card': 'p-4'\r\n      }\r\n    },\r\n    compoundVariants: [\r\n    ],\r\n    defaultVariants: {\r\n      variant: 'vss',\r\n      fit: false,\r\n    }\r\n  }\r\n)\r\n\r\n\r\n\r\nexport default Container",
  "CopyText": "/* eslint-disable react/jsx-handler-names */\r\nimport { IconCheck, IconClipboard } from \"@assets/icons\";\r\nimport Container from \"./Container\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Button from \"@components/ui/Button\";\r\n\r\ntype Props = {\r\n  layout?: \"hbc\" | \"hsc\";\r\n  text: string;\r\n  classContainer?: string;\r\n  classText?: string;\r\n  classIcon?: string;\r\n};\r\n\r\nconst CopyText = (props: Props) => {\r\n  const { layout, text, classContainer, classText, classIcon } = props;\r\n  const [isCopied, setIsCopied] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isCopied) {\r\n      setTimeout(() => {\r\n        setIsCopied(false);\r\n      }, 3000);\r\n    }\r\n  }, [isCopied]);\r\n\r\n  const handleCopyToClipboard = () => {\r\n    if (navigator.clipboard) {\r\n      navigator.clipboard\r\n        .writeText(text)\r\n        .then(() => {\r\n          setIsCopied(true);\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"Failed to copy text: \", err);\r\n        });\r\n    } else {\r\n      const textArea = document.createElement(\"textarea\");\r\n      textArea.value = text;\r\n      textArea.style.position = \"fixed\";\r\n      document.body.appendChild(textArea);\r\n      textArea.focus();\r\n      textArea.select();\r\n      try {\r\n        //set alert in here to notify user if success to copy the text\r\n        document.execCommand(\"copy\");\r\n        setIsCopied(true);\r\n      } catch (err) {\r\n        console.error(\"Failed to copy text: \", err);\r\n      }\r\n      document.body.removeChild(textArea);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container variant={layout || \"hsc\"} gap={\"small\"} className={`${classContainer}`}>\r\n      <p className={`${classText}`}>{text}</p>\r\n      <Button variant=\"plain\" label={isCopied ? <IconCheck className=\"icon-primary\" /> : <IconClipboard className=\"icon-primary w-[1rem]\" />} className={`${classIcon}`} onClick={() => (isCopied ? null : handleCopyToClipboard())} />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CopyText;\r\n",
  "Divider": "import { cn } from \"@lib/utils/helper\";\r\n\r\ninterface TProps {\r\n    variant?: \"left-aligned\" | 'center-aligned' | 'right-aligned';\r\n    text: string;\r\n    width?: string;\r\n    height?: string;\r\n    customeClass?: {\r\n        text?: string;\r\n    }\r\n\r\n}\r\n\r\nconst Divider = (props: TProps) => {\r\n    const { variant = 'center-aligned', text, width = \"100%\", height = \"1px\", customeClass } = props\r\n    return (\r\n        <div className=\"relative flex py-5 items-center w-full\">\r\n            {\r\n                [\"right-aligned\", 'center-aligned']?.includes(variant) && <div style={{ width, height }} className=\"flex-grow border-t \"></div>\r\n            }\r\n            <span className={cn({\r\n                \"flex-shrink mx-4 text-gray\": true,\r\n                [customeClass?.text || \"\"]: customeClass?.text\r\n            })}>{text}</span>\r\n            {\r\n                [\"left-aligned\", 'center-aligned']?.includes(variant) && <div style={{ width, height }} className=\"flex-grow border-t \"></div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Divider",
  "DropdownBase": "import { IconMoreVertical } from \"@assets/icons\";\r\nimport IconChevronToggle from \"@assets/icons/IconChevronToggle\";\r\nimport useOnClickOutside from \"@hooks/useOnClickOutside\";\r\nimport { cn } from \"@lib/utils/helper\";\r\nimport { TOption } from \"@types\";\r\nimport { useRef, useState } from \"react\";\r\n\r\nexport type TOptionDropdown = TOption<string | React.ReactNode> & {\r\n  className?: string;\r\n  title?: string;\r\n};\r\ninterface TProps {\r\n  label?: React.ReactNode | string;\r\n  withButtonTriger?: boolean;\r\n  options: TOptionDropdown[];\r\n  onClick: (data: TOptionDropdown) => void;\r\n  customeClass?: {\r\n    containerDropdown?: string;\r\n    btnDropdown?: string;\r\n  };\r\n  isDefaultStyle?: boolean;\r\n  header?: React.ReactNode;\r\n}\r\n\r\nconst DropdownBase = (props: TProps) => {\r\n  const { options, label, withButtonTriger, onClick: handleOnClick, customeClass, isDefaultStyle = true, header } = props;\r\n\r\n  const ref = useRef<HTMLDivElement | null>(null);\r\n  const refBtn = useRef<HTMLDivElement | null>(null);\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [activeIndex, setActiveIndex] = useState(0); // start form 0 so first data have activeIndex 1 :)\r\n\r\n  useOnClickOutside<HTMLDivElement>({ ref, refExceptions: [refBtn], handler: () => setIsOpen(false) });\r\n\r\n  const handleOnClickOption = (data: TOptionDropdown) => {\r\n    handleOnClick(data);\r\n    setActiveIndex(0);\r\n    setIsOpen(false);\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLButtonElement>) => {\r\n    e?.stopPropagation();\r\n    e?.preventDefault();\r\n\r\n    if (e.key === \"Enter\") {\r\n      const activeData = options[activeIndex - 1];\r\n      handleOnClickOption(activeData);\r\n    }\r\n    if (e.key === \"ArrowDown\") {\r\n      setActiveIndex(activeIndex === options?.length ? activeIndex : activeIndex + 1);\r\n    }\r\n    if (e.key === \"ArrowUp\") {\r\n      setActiveIndex(activeIndex === 1 ? activeIndex : activeIndex - 1);\r\n    }\r\n    return;\r\n  };\r\n\r\n  const handleToggleDropdown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    e?.stopPropagation();\r\n    e?.preventDefault();\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={cn({\r\n        \"relative inline-block text-left w-fit\": true,\r\n        [customeClass?.containerDropdown || \"\"]: customeClass?.containerDropdown,\r\n      })}\r\n    >\r\n      <div ref={refBtn} onClick={handleToggleDropdown}>\r\n        <button\r\n          type=\"button\"\r\n          onKeyDown={handleKeyDown}\r\n          className={cn({\r\n            \"inline-flex w-full justify-center items-center gap-x-2 outline-none\": true,\r\n            \"rounded-md bg-white px-3 py-2 text-sm font-semibold shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50\": isDefaultStyle,\r\n            [customeClass?.btnDropdown || \"\"]: customeClass?.btnDropdown,\r\n          })}\r\n        >\r\n          {label && (\r\n            <>\r\n              {label}\r\n              <IconChevronToggle isOpen={isOpen} className=\"w-[1rem]\" />\r\n            </>\r\n          )}\r\n          {withButtonTriger && <IconMoreVertical />}\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        ref={ref}\r\n        className={cn({\r\n          \"absolute py-2 z-10 mt-2 transition-all overflow-hidden origin-top-right rounded-md bg-white  ring-1 ring-black ring-opacity-5 focus:outline-none\": true,\r\n          \" h-auto shadow-lg w-56  opacity-100\": isOpen,\r\n          \" h-0 shadow-none opacity-0\": !isOpen,\r\n          \"!py-0\": header,\r\n        })}\r\n      >\r\n        <div\r\n          className={cn({\r\n            \"py-0 hidden\": true,\r\n            block: isOpen,\r\n          })}\r\n        >\r\n          {header && (\r\n            <div\r\n              className={cn({\r\n                \"mb-2 py-2 flex items-center gap-2 px-4 bg-gray-100\": true,\r\n              })}\r\n            >\r\n              {header}\r\n            </div>\r\n          )}\r\n          {options?.map((option, i) => (\r\n            <div key={i}>\r\n              {option?.title && <div className=\" px-4 pt-2 text-gray-400\">{option?.title?.toLocaleUpperCase()}</div>}\r\n              <div\r\n                key={i}\r\n                onClick={() => handleOnClickOption(option)}\r\n                className={cn({\r\n                  \"hover:bg-gray-100 !text-black px-4  block  cursor-pointer\": true,\r\n                  \"bg-gray-100 \": activeIndex - 1 == i,\r\n                })}\r\n              >\r\n                <div\r\n                  className={cn({\r\n                    \"py-2 flex items-center gap-2\": true,\r\n                    [option?.className || \"\"]: option?.className,\r\n                  })}\r\n                >\r\n                  {option?.label}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DropdownBase;\r\n",
  "EmptyData": "import Image from '@components/ui/Image';\r\nimport { cn } from '@lib/utils/helper';\r\n\r\n\r\ninterface TProps {\r\n    customeClass?: {\r\n        container?: string;\r\n        img?: string;\r\n        label?: string;\r\n    }\r\n}\r\n\r\nconst EmptyData = (props: TProps) => {\r\n    const { customeClass } = props\r\n    return (\r\n        <div\r\n            className={cn({\r\n                \"flex flex-col items-center justify-center gap-2\": true,\r\n                [customeClass?.container || \"\"]: customeClass?.container\r\n            })}\r\n        >\r\n            <div className=''>\r\n                <Image\r\n                    className={cn({\r\n                        [customeClass?.img || \"\"]: customeClass?.img\r\n                    })}\r\n                    src=\"empty-data.svg\"\r\n                    withLoadEffect={false}\r\n                />\r\n            </div>\r\n            <p\r\n                className={cn({\r\n                    \"font-medium text-base-medium\": true,\r\n                    [customeClass?.label || \"\"]: customeClass?.label\r\n                })}\r\n            >\r\n                No data to show\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmptyData",
  "HelperMessage": "import { cn } from \"@lib/utils/helper\";\r\nimport { HTMLAttributes } from \"react\";\r\n\r\ninterface TProps extends HTMLAttributes<HTMLParagraphElement> {\r\n  message?: string;\r\n  variant: \"error\" | \"success\" | \"warning\";\r\n}\r\nconst HelperMessage = (props: TProps) => {\r\n  const { message, variant, className, ...attrs } = props;\r\n\r\n  return message ? (\r\n    <p\r\n      className={cn({\r\n        [className || \"\"]: className,\r\n        \"text-body-small font-normal\": true,\r\n        \"text-error\": variant === \"error\",\r\n        \"text-warning\": variant === \"warning\",\r\n        \"text-success\": variant === \"success\",\r\n      })}\r\n      {...attrs}\r\n    >\r\n      {message}\r\n    </p>\r\n  ) : null;\r\n};\r\n\r\nexport default HelperMessage;\r\n",
  "Image": "import { cn, getAssetURL } from '@lib/utils/helper';\r\nimport React, { HTMLProps, useState } from 'react';\r\n\r\ninterface TProps extends Omit<Partial<HTMLProps<HTMLImageElement>>, \"\"> {\r\n    src: string;\r\n    alt?: string;\r\n    customeClassName?: {\r\n        container?: string;\r\n        image?: string;\r\n        containerOverlay?: string;\r\n    };\r\n    withSkeleton?: boolean;\r\n    timeoutLoadImage?: number;\r\n\r\n    overlay?: {\r\n        isShowOnHover?: boolean;\r\n        withBackdrop?: boolean;\r\n        content?: React.ReactNode;\r\n    };\r\n    withLoadEffect?: boolean;\r\n\r\n}\r\n\r\n\r\nconst Image = (props: TProps) => {\r\n    const { src, alt, className, timeoutLoadImage = 0, withSkeleton, withLoadEffect = true, customeClassName, overlay, ...attrs } = props;\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n\r\n    const handleLoad = () => {\r\n        setTimeout(() => {\r\n            setIsLoading(false);\r\n        }, timeoutLoadImage)\r\n    };\r\n\r\n    return (\r\n        <div className={cn({\r\n            \"relative group w-full h-full bg-gray-100 overflow-hidden\": true,\r\n            [className || '']: className,\r\n            [customeClassName?.container || \"\"]: customeClassName?.container\r\n        })}>\r\n            <img\r\n                src={src?.includes('http') ? src : getAssetURL({ name: src })}\r\n                alt={alt || src.replace('-', ' ')}\r\n                onLoad={handleLoad}\r\n                className={cn({\r\n                    'w-full h-full object-cover object-center': true,\r\n                    'clear-effect': !isLoading,\r\n                    'blur-effect': isLoading && withLoadEffect,\r\n\r\n                    [customeClassName?.image || '']: customeClassName?.image\r\n\r\n                })}\r\n                {...attrs}\r\n            />\r\n            {\r\n                isLoading && withSkeleton && <div role=\"status\" className=\" absolute top-0 left-0 border h-full w-full border-gray-400 rounded shadow animate-pulse  \">\r\n                    <div className=\"flex items-center justify-center h-full w-full mb-4 bg-gray-400 rounded \">\r\n                        <svg className=\"w-10 h-10 text-gray-600 \" aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" viewBox=\"0 0 16 20\">\r\n                            <path d=\"M14.066 0H7v5a2 2 0 0 1-2 2H0v11a1.97 1.97 0 0 0 1.934 2h12.132A1.97 1.97 0 0 0 16 18V2a1.97 1.97 0 0 0-1.934-2ZM10.5 6a1.5 1.5 0 1 1 0 2.999A1.5 1.5 0 0 1 10.5 6Zm2.221 10.515a1 1 0 0 1-.858.485h-8a1 1 0 0 1-.9-1.43L5.6 10.039a.978.978 0 0 1 .936-.57 1 1 0 0 1 .9.632l1.181 2.981.541-1a.945.945 0 0 1 .883-.522 1 1 0 0 1 .879.529l1.832 3.438a1 1 0 0 1-.031.988Z\" />\r\n                            <path d=\"M5 5V.13a2.96 2.96 0 0 0-1.293.749L.879 3.707A2.98 2.98 0 0 0 .13 5H5Z\" />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {(overlay?.content) && (\r\n                <div className={cn({\r\n                    \"absolute top-0 left-0 opacity-100 translate-y-0  transition-all duration-300 transform  w-full h-full\": true,\r\n                    'translate-y-[50%] group-hover:translate-y-0 opacity-0 group-hover:opacity-100 ': overlay?.isShowOnHover,\r\n                    [customeClassName?.containerOverlay || \"\"]: customeClassName?.containerOverlay,\r\n                    'bg-black/30 ': overlay?.withBackdrop\r\n                })}>\r\n                    {overlay?.content}\r\n                </div>\r\n            )\r\n            }\r\n\r\n\r\n\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default Image;\r\n",
  "ContainerInput": "import { IconClose, IconEye, IconEyeClose } from \"@assets/icons\";\r\nimport Container from \"@components/ui/Container\";\r\nimport HelperMessage from \"@components/ui/HelperMessage\";\r\nimport { cn, isEmptyValue } from '@lib/utils/helper';\r\nimport { TBasePropsInput } from \"@types\";\r\nimport clsx from \"clsx\";\r\nimport { useState } from \"react\";\r\n\r\nexport interface TPropsInput<TInput,> extends TBasePropsInput {\r\n    children: React.ReactNode | ((attrsInput: TInput) => React.ReactNode);\r\n    disabled?: boolean;\r\n    name?: string;\r\n    type?: string;\r\n    onlyContainer?: boolean;\r\n    isClerable?: boolean;\r\n    value?: any;\r\n    onChange?: (e: any) => void;\r\n    childrenOverlay?: React.ReactNode;\r\n    isNotUsingDefaultStyle?: {\r\n        input?: boolean\r\n    };\r\n    onCustomeClearHandler?: () => void;\r\n    customeClearValue?: string\r\n}\r\n\r\nconst ContainerInput = <TInput,>(props: TPropsInput<TInput>) => {\r\n    const { name, children, onCustomeClearHandler, customeClearValue, isNotUsingDefaultStyle, childrenOverlay, label, variant = \"v1\", isClerable = false, type, onlyContainer = false, errorMessage, customeElement, disabled, customeClass, value, onChange, ...attrsInput } = props;\r\n    const [dynamicType, setDynamicType] = useState(type)\r\n\r\n    const classNameInput = cn({\r\n        \"peer w-full shrink !outline-none border-none focus:border-none focus:ring-0 p-0 text-body-base placeholder:text-gray-400\": !isNotUsingDefaultStyle?.input,\r\n        \"!bg-disabled\": disabled,\r\n        [customeClass?.input || '']: customeClass?.input,\r\n        \"px-4\": customeElement?.preEnd,\r\n        \"pr-4 pl-1\": customeElement?.preStart\r\n    })\r\n\r\n    const handleToggleTypePassword = () => {\r\n        setDynamicType(dynamicType === \"password\" ? \"text\" : \"password\")\r\n    }\r\n\r\n    const handleOnClearValue = () => {\r\n\r\n        onCustomeClearHandler ? onCustomeClearHandler() : onChange && onChange({\r\n            target: {\r\n                name: name || \"\",\r\n                value: Array.isArray(value) ? [] : \"\"\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <Container className={`${customeClass?.ciV4} relative flex flex-col gap-2`}>\r\n\r\n            <section className={`${customeClass?.ciV3} flex flex-col gap-2 w-full`}>\r\n                {label && ![\"v2\", \"v6\"]?.includes(variant) && (\r\n                    <label\r\n                        htmlFor={name}\r\n                        className={cn({\r\n                            \"font-medium w-fit\": true,\r\n                            \"absolute top-[-0.65rem] left-[0.45rem] text-body-small bg-white px-1 z-[10]\": variant === \"v4\"\r\n                        })}\r\n                    >\r\n                        {label}\r\n                    </label>\r\n                )}\r\n\r\n                {\r\n                    onlyContainer && typeof (children) !== \"function\" ? children : (\r\n                        <div className={cn({\r\n                            \"bg-white flex flex-nowrap items-center gap-2 text-body-base border border-input rounded-lg  w-full \": true,\r\n                            [customeClass?.ciV2 || \"\"]: customeClass?.ciV2,\r\n\r\n                            \"!bg-disabled !border\": disabled,\r\n                            \"focus-within:ring-primary-200 focus-within:!border-primary\": !errorMessage,\r\n                            \"border-error focus-within:!ring-error-200 focus-within:!border-error\": errorMessage,\r\n\r\n                            \"!rounded-[5rem]\": variant === \"v3\",\r\n                            'focus-within:!ring-0': [\"v2\", \"v4\", \"v6\"]?.includes(variant),\r\n                            \"!border-t-0 !px-0 !border-l-0 !border-r-0 !rounded-none \": variant === \"v5\",\r\n                            \"!py-4 focus-within:!pb-2 focus-within:!pt-5\": variant === \"v6\",\r\n                            \"!pb-2 !pt-5 \": (variant === \"v6\" && value),\r\n\r\n                            \"px-3 py-2 \": !customeElement?.preStart && !customeElement?.preEnd,\r\n                            \"overflow-hidden\": customeElement?.preStart || customeElement?.preEnd,\r\n                        })}\r\n                        >\r\n                            <div className={cn({\r\n                                \"hidden\": true,\r\n                                \"shrink-0 !flex bg-gray-100 p-2 \": customeElement?.preStart,\r\n                            })} >\r\n                                {customeElement?.preStart}\r\n                            </div>\r\n\r\n                            <div className={cn({\r\n                                \"hidden\": true,\r\n                                \"shrink-0 !flex \": customeElement?.start,\r\n                            })} >\r\n                                {customeElement?.start}\r\n                            </div>\r\n\r\n                            <div className={`${customeClass?.ciV1} flex flex-col w-full relative `}>\r\n                                {\r\n                                    typeof (children) === \"function\" ? <>\r\n                                        {children({ ...attrsInput as TInput, className: classNameInput, name, type: dynamicType, disabled, value, onChange })}\r\n                                        {label && [\"v2\", \"v6\"].includes(variant) && (\r\n                                            <label\r\n                                                id=\"floating-label\"\r\n                                                htmlFor={name}\r\n                                                className={cn({\r\n                                                    \"font-medium absolute left-0 text-sm text-gray duration-300 transform -translate-y-5 bg-white px-1 scale-75 top-0 origin-[0]  peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-5 peer-focus:bg-white  z-10\": true,\r\n                                                    [customeClass?.label || '']: customeClass?.label,\r\n                                                    '!cursor-auto': variant === \"v6\",\r\n                                                    [\"peer-placeholder-shown:ml-[0px] peer-focus:ml-[-35px] ml-[-35px]\"]: customeElement?.start,\r\n                                                    \"ml-[-0.25rem] \": !customeElement?.start,\r\n                                                })}\r\n                                            >\r\n                                                {label}\r\n                                            </label>\r\n                                        )}\r\n                                    </> : children\r\n\r\n                                }\r\n\r\n                            </div>\r\n                            {isClerable && !isEmptyValue(customeClearValue) && <IconClose className='cursor-pointer' onClick={handleOnClearValue} />}\r\n\r\n                            <div className={clsx({\r\n                                \"hidden\": true,\r\n                                \"shrink-0 !flex\": customeElement?.end\r\n                            })} >\r\n                                {customeElement?.end}\r\n                            </div>\r\n                            <div className={cn({\r\n                                \"hidden\": true,\r\n                                \"shrink-0 !flex bg-gray-100 p-2 \": customeElement?.preEnd,\r\n                            })} >\r\n                                {customeElement?.preEnd}\r\n                            </div>\r\n\r\n                            {type === \"password\" && (\r\n                                <div onClick={handleToggleTypePassword} className=\"cursor-pointer-custome \">\r\n                                    {\r\n                                        dynamicType === \"password\" ? <IconEye /> : <IconEyeClose />\r\n                                    }\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    )\r\n                }\r\n            </section>\r\n            {childrenOverlay}\r\n            <HelperMessage variant={\"error\"} message={errorMessage} />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ContainerInput;\r\n",
  "InputBase": "import ContainerInput from \"@components/ui/inputs/ContainerInput\";\r\nimport { TBasePropsInput } from \"@types\";\r\nimport React from \"react\";\r\n\r\ninterface TProps extends TBasePropsInput, React.HTMLProps<HTMLInputElement> {\r\n  name: string;\r\n  value: string;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst InputBase = (props: TProps) => {\r\n  const { ...attrs } = props;\r\n  return (\r\n    <ContainerInput<React.HTMLProps<HTMLInputElement>> {...attrs} isClerable>\r\n      {(attrsInput) => <input {...attrsInput} id={attrsInput?.name} placeholder={attrs?.variant === \"v2\" ? \"\" : attrsInput?.placeholder || \"\"} />}\r\n    </ContainerInput>\r\n  );\r\n};\r\n\r\nexport default InputBase;\r\n",
  "InputCheckbox": "/* eslint-disable react/jsx-handler-names */\r\nimport { IconCheck } from \"@assets/icons\";\r\nimport Container from \"@components/ui/Container\";\r\nimport { TBasePropsInput } from \"@types\";\r\nimport { useMemo } from \"react\";\r\n\r\ninterface TProps extends Omit<TBasePropsInput, \"errorMessage\">, Omit<React.HTMLProps<HTMLInputElement>, \"value\" | \"onChange\"> {\r\n  name: string;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  label?: string;\r\n  value: string;\r\n  classNameContainer?: string;\r\n  customeClassnameCheckbox?: {\r\n    container?: string;\r\n  };\r\n}\r\n\r\nconst InputCheckbox = (props: TProps) => {\r\n  const { name, onChange, value, customeClassnameCheckbox, label = \"\", checked, ...attrsInput } = props;\r\n\r\n  const updatedChecked = useMemo(() => {\r\n    return [\"true\", \"false\"]?.includes(String(value)) ? String(value) === \"true\" : checked;\r\n  }, [checked, value]);\r\n\r\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const isChecked = e.target.checked;\r\n    const updatedValue = [\"true\", \"false\"]?.includes(String(value)) ? String(isChecked) : value;\r\n\r\n    onChange({\r\n      ...e,\r\n      target: {\r\n        ...e.target,\r\n        name,\r\n        value: updatedValue,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Container onMouseDown={(e) => e.preventDefault()} variant={\"hsc\"} gap={\"base\"} className={`${!label && \"!w-fit\"} ${customeClassnameCheckbox?.container} `}>\r\n      <label className=\"  relative flex items-center py-1 rounded-full cursor-pointer\" htmlFor=\"radio\">\r\n        <input\r\n          {...attrsInput}\r\n          type=\"checkbox\"\r\n          name={name}\r\n          checked={updatedChecked}\r\n          value={String(value)}\r\n          className=\"before:content[''] peer relative h-5 w-5 cursor-pointer appearance-none rounded-md border border-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-gray-500  before:opacity-0 before:transition-opacity  disabled:border-gray-200 disabled:bg-gray-300 disabled:cursor-not-allowed checked:border-primary checked:bg-primary checked:before:bg-primary disabled:before:!bg-none disabled:before:opacity-0 hover:before:opacity-10\"\r\n          onChange={handleOnChange}\r\n        />\r\n        <span className=\"absolute text-white transition-opacity opacity-0 pointer-events-none top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 peer-checked:opacity-100\">\r\n          <IconCheck className=\"icon-white\" />\r\n        </span>\r\n      </label>\r\n      {label && (\r\n        <label className=\"mt-px cursor-pointer select-none\" htmlFor=\"radio\">\r\n          {label}\r\n        </label>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default InputCheckbox;\r\n",
  "InputCurrency": "import ContainerInput from \"@components/ui/inputs/ContainerInput\";\r\nimport { TBasePropsInput } from \"@types\";\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\ninterface TProps extends TBasePropsInput, React.HTMLProps<HTMLInputElement> {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\nconst InputCurrency = (props: TProps) => {\r\n    const { onChange: handleOnChange, value, ...attrs } = props;\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n    const [formattedValue, setFormattedValue] = useState<string>(value);\r\n\r\n    useEffect(() => {\r\n        setFormattedValue(handleFormatDoubleDigitAfterDot(formatValue(value)));\r\n    }, [])\r\n\r\n    const formatValue = (value: string): string => {\r\n        let valueFormatted = String(value)\r\n            ?.replace(/[^\\d.]+/g, \"\")\r\n            ?.replace(/(\\..*?)\\./g, \"$1\")\r\n            ?.replace(/(\\.\\d\\d)\\d+/g, \"$1\")\r\n            ?.replace(/^0+(?=\\d)/, '');\r\n\r\n        const parts = valueFormatted?.split('.');\r\n        parts[0] = parts[0]?.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n        valueFormatted = parts?.join('.');\r\n        return valueFormatted;\r\n    };\r\n\r\n\r\n    const handleOnChangeFormatedValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { selectionStart } = e.target;\r\n        let cursorPosition = selectionStart as number;\r\n        const valueDeleted = value[cursorPosition]\r\n        const valueRaw = e.target.value\r\n        const formattedValue = formatValue(valueRaw);\r\n\r\n        if (inputRef.current) {\r\n            const inputLengthDifference = formattedValue.length - e.target.value.length;\r\n            cursorPosition = (selectionStart as number) + inputLengthDifference;\r\n            if (valueDeleted === \",\") {\r\n                cursorPosition -= 1\r\n            }\r\n        }\r\n        e.target.value = formattedValue\r\n        setFormattedValue(formatValue(e.target.value));\r\n\r\n        handleOnChange(e);\r\n        setTimeout(() => {\r\n            if (inputRef.current) {\r\n                inputRef.current.selectionStart = cursorPosition;\r\n                inputRef.current.selectionEnd = cursorPosition;\r\n            }\r\n        }, 0);\r\n    }\r\n\r\n    const handleOnBlurFormattedValue = (e: React.FocusEvent<HTMLInputElement>) => {\r\n        let valueFormatted = e.target.value;\r\n        if (valueFormatted !== \"\") {\r\n            const parts = valueFormatted.split('.');\r\n\r\n            if (parts.length === 1) {\r\n                valueFormatted += '.00';\r\n            }\r\n            else if (parts[1].length < 2) {\r\n                valueFormatted += '0'.repeat(2 - parts[1].length);\r\n            }\r\n        }\r\n        e.target.value = valueFormatted;\r\n        setFormattedValue(e.target.value)\r\n        handleOnChange(e);\r\n    };\r\n\r\n    const handleFormatDoubleDigitAfterDot = (value: string) => {\r\n        let valueFormatted = value\r\n\r\n        if (valueFormatted !== \"\") {\r\n            const parts = valueFormatted.split('.');\r\n\r\n            if (parts.length === 1) {\r\n                valueFormatted += '.00';\r\n            }\r\n            else if (parts[1].length < 2) {\r\n                valueFormatted += '0'.repeat(2 - parts[1].length);\r\n            }\r\n        }\r\n        return valueFormatted\r\n    }\r\n\r\n    return (\r\n        <ContainerInput<React.HTMLProps<HTMLInputElement>>  {...attrs} onChange={handleOnChange} value={value} isClerable>\r\n            {\r\n                (attrsInput) => <input\r\n                    {...attrsInput}\r\n                    onBlur={handleOnBlurFormattedValue}\r\n                    onChange={handleOnChangeFormatedValue}\r\n                    value={formattedValue}\r\n                    id={attrsInput?.name}\r\n                    placeholder={attrs?.variant === \"v2\" ? \"\" : attrs?.placeholder}\r\n                    ref={inputRef}\r\n                />\r\n            }\r\n        </ContainerInput>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default InputCurrency;\r\n",
  "InputDate": "/* eslint-disable @typescript-eslint/ban-ts-comment */\r\n/* eslint-disable react/jsx-handler-names */\r\nimport { IconCalender, IconChevronLeft, IconChevronRight } from \"@assets/icons\";\r\nimport Button from \"@components/ui/Button\";\r\nimport ContainerInput from \"@components/ui/inputs/ContainerInput\";\r\nimport { TBasePropsInput, TCustomeEventOnChange } from \"@types\";\r\nimport clsx from \"clsx\";\r\nimport { format } from \"date-fns\";\r\nimport { useState } from \"react\";\r\nimport DatePicker, { ReactDatePickerProps } from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\ninterface TProps<TWithRange extends boolean, TWIthMultiple extends boolean> extends TBasePropsInput, Omit<Partial<ReactDatePickerProps<TWithRange, TWIthMultiple>>, \"onChange\" | \"value\"> {\r\n  name: string;\r\n  value: TWithRange extends true ? [Date, Date] : Date; // Updated to handle single Date or [Date, Date]\r\n  onChange: (e: TCustomeEventOnChange<TWithRange extends true ? [Date, Date] : Date>) => void; // Updated onChange handler\r\n  placeholder?: string;\r\n  iconPosition?: \"start\" | \"end\";\r\n}\r\n\r\nconst InputDate = <TWithRange extends boolean = false, TWIthMultiple extends boolean = false>(props: TProps<TWithRange, TWIthMultiple>) => {\r\n  const { name, value, iconPosition = \"start\", placeholder, onChange, ...attrs } = props;\r\n\r\n  const [showTypeDate, setShowTypeDate] = useState<\"date\" | \"month\" | \"year\" | \"\">(\"date\");\r\n  const [isShouldCloseOnSelect, setIsShouldCloseOnSelect] = useState(true);\r\n  const [focus, setFocus] = useState(false);\r\n\r\n  const handleOnChange = (valueDate: TWithRange extends true ? [Date, Date] : Date) => {\r\n    setShowTypeDate(showTypeDate === \"date\" ? \"\" : \"date\");\r\n    setIsShouldCloseOnSelect(true);\r\n    onChange({\r\n      target: {\r\n        name,\r\n        value: valueDate,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleShowMonth = () => {\r\n    setShowTypeDate(\"month\");\r\n    setIsShouldCloseOnSelect(false);\r\n  };\r\n\r\n  const handleShowYear = () => {\r\n    setShowTypeDate(\"year\");\r\n    setIsShouldCloseOnSelect(false);\r\n  };\r\n\r\n  const handleOnCalenderClose = () => {\r\n    setShowTypeDate(\"\");\r\n  };\r\n\r\n  return (\r\n    <ContainerInput\r\n      {...attrs}\r\n      value={value}\r\n      customeClass={{\r\n        label: `${!focus && !value && attrs?.variant === \"v6\" && \"scale-100 translate-y-0 ml-[20px]\"}`,\r\n      }}\r\n    >\r\n      {() => (\r\n        <DatePicker\r\n          onCalendarClose={handleOnCalenderClose}\r\n          selected={Array.isArray(value) ? value[0] : value}\r\n          startDate={Array.isArray(value) ? value[0] : value}\r\n          endDate={Array.isArray(value) ? value[1] : value}\r\n          selectsRange={attrs.selectsRange}\r\n          // @ts-ignore\r\n          onChange={handleOnChange}\r\n          nextMonthButtonLabel=\">\"\r\n          previousMonthButtonLabel=\"<\"\r\n          showPreviousMonths={true}\r\n          placeholderText={placeholder}\r\n          showYearPicker={showTypeDate === \"year\"}\r\n          showMonthYearPicker={showTypeDate === \"month\"}\r\n          showFullMonthYearPicker={showTypeDate === \"date\"}\r\n          autoFocus={focus}\r\n          onFocus={() => setFocus(true)}\r\n          onBlur={() => setFocus(false)}\r\n          renderCustomHeader={({ date, decreaseMonth, increaseMonth, decreaseYear, increaseYear, prevMonthButtonDisabled, nextMonthButtonDisabled }) => (\r\n            <div className=\"flex items-center rounded-[16px] justify-between px-2\">\r\n              <Button\r\n                onClick={[\"year\", \"month\"]?.includes(showTypeDate) ? decreaseYear : decreaseMonth}\r\n                disabled={prevMonthButtonDisabled}\r\n                shape={\"circle\"}\r\n                variant={\"solid-white\"}\r\n                label={<IconChevronLeft />}\r\n                className={clsx({\r\n                  \"p-2\": true,\r\n                  \"cursor-not-allowed opacity-50 \": prevMonthButtonDisabled,\r\n                })}\r\n              />\r\n\r\n              <div className=\"text-body-medium font-semibold flex gap-2 text-gray-700\">\r\n                {[\"date\", \"\"].includes(showTypeDate) && (\r\n                  <span onClick={handleShowMonth} className=\"cursor-pointer\">\r\n                    {format(date || \"\", \"MMMM\")}\r\n                  </span>\r\n                )}\r\n\r\n                <span onClick={showTypeDate === \"year\" ? () => null : handleShowYear} className={showTypeDate === \"year\" ? \"\" : \"cursor-pointer\"}>\r\n                  {format(date || \"\", \"yyyy\")}\r\n                </span>\r\n              </div>\r\n              <Button\r\n                shape={\"circle\"}\r\n                variant={\"solid-white\"}\r\n                onClick={[\"year\", \"month\"]?.includes(showTypeDate) ? increaseYear : increaseMonth}\r\n                disabled={nextMonthButtonDisabled}\r\n                className={clsx({\r\n                  \"p-2\": true,\r\n                  \"cursor-not-allowed opacity-50\": nextMonthButtonDisabled,\r\n                })}\r\n                label={<IconChevronRight />}\r\n              />\r\n            </div>\r\n          )}\r\n          shouldCloseOnSelect={isShouldCloseOnSelect}\r\n          enableTabLoop={true}\r\n          yearItemNumber={8}\r\n          showIcon={true}\r\n          icon={<IconCalender />}\r\n          disabled={attrs.disabled}\r\n          isClearable={!!value}\r\n          toggleCalendarOnIconClick={true}\r\n          popperClassName=\"flex flex-col gap-2 z-[10] justify-enter react-datepicker-left !shadow-none overflow-hidden\"\r\n          wrapperClassName=\"w-full\"\r\n          className={clsx({\r\n            \"\": true,\r\n            \"ml-6\": iconPosition === \"start\",\r\n            \"mr-6\": iconPosition === \"end\",\r\n          })}\r\n          calendarClassName={\"border relative\"}\r\n          calendarIconClassname={clsx({\r\n            \"absolute mt-[-0.25rem] z-[2]\": true,\r\n            \"left-[-0.5rem]\": iconPosition === \"start\",\r\n            \"right-[-0.5rem]\": iconPosition === \"end\",\r\n          })}\r\n          clearButtonClassName={clsx({\r\n            \"right-[-0.25rem] z-[10]\": true,\r\n            \"right-[0.65rem]\": iconPosition === \"end\",\r\n          })}\r\n        />\r\n      )}\r\n    </ContainerInput>\r\n  );\r\n};\r\n\r\nexport default InputDate;\r\n",
  "InputMultipleCheckbox": "import Container from \"@components/ui/Container\";\r\nimport ContainerInput from \"@components/ui/inputs/ContainerInput\";\r\nimport InputCheckbox from \"@components/ui/inputs/InputCheckbox\";\r\nimport { arraysHaveSameMembers, cn, handlePreventDefault } from \"@lib/utils/helper\";\r\nimport { TBasePropsInput, TCustomeEventOnChange } from \"@types\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\ninterface TProps extends TBasePropsInput, Omit<React.HTMLProps<HTMLInputElement>, \"value\" | \"onChange\"> {\r\n  name: string;\r\n  onChange: (e: TCustomeEventOnChange<string[]>) => void;\r\n  options: {\r\n    label: string;\r\n    value: any;\r\n  }[];\r\n  value: any[];\r\n  customeClassMulCheckbox?: {\r\n    containerOption?: string;\r\n    containerCheckbox?: string;\r\n  };\r\n  withSelectAll?: boolean;\r\n  activeIndex?: number;\r\n}\r\n\r\nconst InputMultipleCheckbox = (props: TProps) => {\r\n  const { name, onChange, options, value, customeClassMulCheckbox, withSelectAll, onScroll: handleOnScroll, errorMessage, ...attrsInput } = props;\r\n  const [isCheckAll, setIsCheckAll] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (withSelectAll) {\r\n      setIsCheckAll(\r\n        arraysHaveSameMembers(\r\n          value,\r\n          options?.map((data) => data.value),\r\n        ),\r\n      );\r\n    }\r\n  }, [value]);\r\n\r\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const isChecked = e.target.checked;\r\n    const valueInput = e.target?.value;\r\n\r\n    let updateValue = isChecked ? [...value, valueInput] : value?.filter((data) => data !== valueInput);\r\n    if (valueInput === \"all\") {\r\n      updateValue = isChecked ? options?.map((data) => data?.value) : [];\r\n    }\r\n\r\n    onChange({\r\n      target: {\r\n        name,\r\n        value: updateValue,\r\n      },\r\n    });\r\n  };\r\n\r\n  const Checkbox = (props: any) => {\r\n    return (\r\n      <Container\r\n        className={cn({\r\n          [customeClassMulCheckbox?.containerCheckbox || \"\"]: customeClassMulCheckbox?.containerCheckbox,\r\n        })}\r\n        onMouseDown={handlePreventDefault}\r\n        variant={\"hsc\"}\r\n        gap={\"base\"}\r\n      >\r\n        <InputCheckbox label={props?.option?.label} type=\"checkbox\" name={name} checked={props?.isChecked} value={props?.option?.value} onChange={handleOnChange} />\r\n      </Container>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ContainerInput {...attrsInput} errorMessage={errorMessage} onlyContainer={true}>\r\n      <Container className={`${customeClassMulCheckbox?.containerOption}`} onScroll={handleOnScroll}>\r\n        {withSelectAll && <Checkbox isChecked={isCheckAll} option={{ label: \"Select All\", value: \"all\" }} />}\r\n        {options?.map((option, i) => {\r\n          const isChecked = value?.some((data) => data === option?.value);\r\n          return <Checkbox key={i} index={i} isChecked={isChecked} option={option} />;\r\n        })}\r\n      </Container>\r\n    </ContainerInput>\r\n  );\r\n};\r\n\r\nexport default InputMultipleCheckbox;\r\n",
  "InputNPWP": "import ContainerInput from \"@components/ui/inputs/ContainerInput\";\r\nimport useFormattedInput from '@hooks/useFormattedInput';\r\nimport { TBasePropsInput } from \"@types\";\r\nimport React from 'react';\r\n\r\ninterface TProps extends TBasePropsInput, React.HTMLProps<HTMLInputElement> {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    name: string;\r\n    value: string;\r\n}\r\n\r\nconst InputNPWP = (props: TProps) => {\r\n    const { onChange: handleOnChange, ...attrs } = props;\r\n    const formatPattern = \"XX.XXX.XXX.X-XXX.XXX\"\r\n    const { inputRef, handleOnChangeFormattedValue } = useFormattedInput({ value: attrs?.value, onChange: handleOnChange, formatPattern })\r\n\r\n    return (\r\n        <ContainerInput<React.HTMLProps<HTMLInputElement>>  {...attrs} onChange={handleOnChange} isClerable>\r\n            {\r\n                (attrsInput) => <input\r\n                    ref={inputRef}\r\n                    {...attrsInput}\r\n                    maxLength={formatPattern?.length}\r\n                    onChange={handleOnChangeFormattedValue}\r\n                    placeholder={attrs?.variant === \"v2\" ? \"\" : \"XX.XXX.XXX.X-XXX.XXX\"}\r\n                />\r\n            }\r\n        </ContainerInput>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default InputNPWP;\r\n",
  "InputOTP": "/* eslint-disable react/jsx-handler-names */\r\nimport Alert from '@components/ui/Alert';\r\nimport Container from '@components/ui/Container';\r\nimport { findLargestIndexWithValue, findSmallestIndexWithEmptyValue } from '@lib/utils/helper';\r\nimport { TCustomeEventOnChange } from '@types';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\ninterface TProps {\r\n    name: string;\r\n    onChange: (e: TCustomeEventOnChange<boolean>) => void;\r\n    numberOfDigits: number;\r\n    correctOTP: string;\r\n    message?: {\r\n        error?: string;\r\n        success?: string;\r\n    }\r\n}\r\n\r\ntype TAlertState = {\r\n    withIcon: boolean;\r\n    isFixed: boolean;\r\n    message: string;\r\n    show: boolean;\r\n} & (| { type: 'error'; variant: 'error-soft'; } | { type: 'success'; variant: 'success-soft'; });\r\n\r\nconst InputOTP = (props: TProps) => {\r\n    const { numberOfDigits, message, onChange, name, correctOTP, } = props;\r\n\r\n    const otpBoxReference = useRef<Array<HTMLDivElement | null>>([]);\r\n\r\n    const [otp, setOtp] = useState<string[]>(new Array(numberOfDigits).fill(\"\"));\r\n    const [alert, setAlert] = useState<TAlertState>({\r\n        show: false,\r\n        type: 'error',\r\n        message: '',\r\n        isFixed: false,\r\n        withIcon: true,\r\n        variant: 'error-soft'\r\n    })\r\n\r\n    useEffect(() => {\r\n        const isValid = otp.join(\"\") !== \"\" && otp.join(\"\") === correctOTP\r\n\r\n        const updateAlertState: TAlertState = isValid ? {\r\n            ...alert,\r\n            message: message?.success || 'OTP is Correct',\r\n            type: \"success\",\r\n            variant: \"success-soft\",\r\n        } : {\r\n            ...alert,\r\n            message: message?.error || 'OTP is In correct',\r\n            type: \"error\",\r\n            variant: \"error-soft\",\r\n        }\r\n        setAlert(updateAlertState)\r\n\r\n        onChange({\r\n            target: {\r\n                name,\r\n                value: isValid\r\n            }\r\n        })\r\n    }, [otp]);\r\n\r\n\r\n    const handleChange = (value: string, index: number) => {\r\n        const newArr = [...otp];\r\n        const firstIndexWithEmptyValue = findSmallestIndexWithEmptyValue(otp)\r\n        const lastIndexWithHaveValue = findLargestIndexWithValue(otp);\r\n        if (index > firstIndexWithEmptyValue && firstIndexWithEmptyValue !== -1) {\r\n            // If there is an empty value before the current index and it's not the first index:\r\n            // then move the focus to the input at the firstIndexWithEmptyValue and fill the value to the input with firstIndexWithEmptyValue\r\n            otpBoxReference?.current[index]?.focus();\r\n            newArr[firstIndexWithEmptyValue] = value;\r\n            otpBoxReference?.current[firstIndexWithEmptyValue]?.focus();\r\n        } else if (lastIndexWithHaveValue > index && !value) {\r\n            // If the user tries to delete a value from a non-last input box while there are values in later inputs,\r\n            // then move the focus to the lastIndexWithHaveValue input with a value and clear that value.\r\n            newArr[lastIndexWithHaveValue] = value;\r\n        } else if (value && index < numberOfDigits - 1) {\r\n            // If the user fills a value in a non-last input box, \r\n            // then update the value and move the focus to the next input.\r\n            newArr[index] = value;\r\n            otpBoxReference?.current[index + 1]?.focus();\r\n        } else {\r\n            // handle filling or clearing the first or last input box.\r\n            newArr[index] = value;\r\n        }\r\n        setOtp(newArr);\r\n    };\r\n\r\n\r\n    const handleBackspaceAndEnter = (e: React.KeyboardEvent<HTMLInputElement>, index: number) => {\r\n        const value = (e?.target as HTMLInputElement)?.value\r\n        const lastIndexWithHaveValue = findLargestIndexWithValue(otp)\r\n\r\n        if (e.key === \"Backspace\" && lastIndexWithHaveValue > index) {\r\n            otpBoxReference?.current[lastIndexWithHaveValue]?.focus()\r\n        } else if (e.key === \"Backspace\" && !value && index > 0) {\r\n            otpBoxReference?.current[index - 1]?.focus()\r\n        }\r\n        else if (e.key === \"Enter\" && !value && index < numberOfDigits - 1) {\r\n            otpBoxReference.current[index + 1]?.focus()\r\n        }\r\n        return e\r\n    }\r\n\r\n    return (\r\n        <Container gap={\"small\"}>\r\n            <div className='flex gap-4'>\r\n                {otp.map((digit, index) => (\r\n                    <input\r\n                        key={index}\r\n                        value={digit}\r\n                        onChange={(e) => handleChange(e.target.value?.slice(-1), index)}\r\n                        onKeyUp={(e) => handleBackspaceAndEnter(e, index)}\r\n                        ref={(reference) => {\r\n                            return otpBoxReference.current[index] = reference\r\n                        }}\r\n                        className={`border-gray-100 bg-gray-100 flex items-center justify-center text-center p-2 w-[2.5rem] h-[2.5rem] !outline-none `}\r\n                    />\r\n                ))}\r\n            </div>\r\n            {\r\n                otp?.filter(data => data).length === numberOfDigits && <Alert {...alert} withIcon show />\r\n            }\r\n        </Container>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default InputOTP;\r\n",
  "InputPercentage": "import { IconPercentage } from \"@assets/icons\";\r\nimport ContainerInput from \"@components/ui/inputs/ContainerInput\";\r\nimport { TBasePropsInput } from \"@types\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\ninterface TProps extends TBasePropsInput, React.HTMLProps<HTMLInputElement> {\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  name: string;\r\n  value: string;\r\n  maxValue?: number;\r\n  minValue?: number;\r\n}\r\n\r\nconst InputPercentage = (props: TProps) => {\r\n  const { onChange: handleOnChange, value, maxValue = 100, minValue = 0, ...attrs } = props;\r\n  const [formattedValue, setFormattedValue] = useState<string>(value);\r\n\r\n  useEffect(() => {\r\n    setFormattedValue(formatValue(value));\r\n  }, []);\r\n\r\n  const formatValue = (value: string) => {\r\n    let valueFormatted = value\r\n      .replace(/[^\\d.]+/g, \"\")\r\n      .replace(/(\\..*?)\\./g, \"$1\")\r\n      .replace(/(\\.\\d\\d)\\d+/g, \"$1\")\r\n      .replace(/^0+(?=\\d)/, \"\");\r\n\r\n    const numericValue = parseFloat(valueFormatted);\r\n    if (!isNaN(numericValue)) {\r\n      if (numericValue < minValue) {\r\n        valueFormatted = String(minValue);\r\n      } else if (numericValue > maxValue) {\r\n        valueFormatted = String(maxValue);\r\n      }\r\n    }\r\n\r\n    return valueFormatted;\r\n  };\r\n\r\n  const handleOnChangeFormatedValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const valueFormatted: string = formatValue(e.target.value);\r\n    e.target.value = valueFormatted;\r\n    handleOnChange(e);\r\n    setFormattedValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <ContainerInput<React.HTMLProps<HTMLInputElement>>\r\n      {...attrs}\r\n      customeElement={{\r\n        ...attrs?.customeElement,\r\n        end: <IconPercentage />,\r\n      }}\r\n      onChange={handleOnChange}\r\n      value={value}\r\n    >\r\n      {(attrsInput) => <input {...attrsInput} onChange={handleOnChangeFormatedValue} value={formattedValue} id={attrsInput?.name} placeholder={attrs?.variant === \"v2\" ? \"\" : attrsInput?.placeholder || \"\"} />}\r\n    </ContainerInput>\r\n  );\r\n};\r\n\r\nexport default InputPercentage;\r\n",
  "InputPhoneNumber": "import ContainerInput from \"@components/ui/inputs/ContainerInput\";\r\nimport useFormattedInput from \"@hooks/useFormattedInput\";\r\nimport { TBasePropsInput } from \"@types\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\ninterface TProps extends TBasePropsInput, React.HTMLProps<HTMLInputElement> {\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  name: string;\r\n  value: string;\r\n}\r\n\r\nconst InputPhoneNumber = (props: TProps) => {\r\n  const { onChange: handleOnChange, ...attrs } = props;\r\n  const formatPattern = \"XX-XXX-XXX-XXX\";\r\n\r\n  const updateValue = attrs?.value?.replace(/^0+/, \"\");\r\n  const { inputRef, handleOnChangeFormattedValue, formatValue } = useFormattedInput({ value: updateValue, onChange: handleOnChange, formatPattern });\r\n  const [formatedValue, setFormatedValue] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setFormatedValue(formatValue(updateValue, formatPattern));\r\n  }, []);\r\n\r\n  const handleOnChangeUpdate = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target;\r\n    if (value[0] === \"0\") {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n    handleOnChangeFormattedValue(e);\r\n    setFormatedValue(formatValue(e.target.value, formatPattern));\r\n  };\r\n\r\n  return (\r\n    <ContainerInput<React.HTMLProps<HTMLInputElement>>\r\n      {...attrs}\r\n      onChange={handleOnChange}\r\n      customeElement={{\r\n        ...attrs?.customeElement,\r\n        start: <div>+62</div>,\r\n      }}\r\n    >\r\n      {(attrsInput) => <input {...attrsInput} value={formatedValue} ref={inputRef} onChange={handleOnChangeUpdate} placeholder={attrs?.variant === \"v2\" ? \"\" : formatPattern} maxLength={formatPattern?.length} />}\r\n    </ContainerInput>\r\n  );\r\n};\r\n\r\nexport default InputPhoneNumber;\r\n",
  "InputRadioButton": "/* eslint-disable react/jsx-handler-names */\r\nimport Container from \"@components/ui/Container\";\r\nimport ContainerInput from \"@components/ui/inputs/ContainerInput\";\r\nimport { TBasePropsInput } from \"@types\";\r\nimport clsx from \"clsx\";\r\n\r\ninterface TProps extends TBasePropsInput, Omit<React.HTMLProps<HTMLInputElement>, \"value\" | \"onChange\"> {\r\n  name: string;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  options: {\r\n    label: string;\r\n    value: any;\r\n  }[];\r\n  value: string;\r\n}\r\n\r\nconst InputRadioButton = (props: TProps) => {\r\n  const { name, onChange, options, value, ...attrsInput } = props;\r\n\r\n  return (\r\n    <ContainerInput {...attrsInput} onlyContainer={true}>\r\n      <Container gap={\"tiny\"}>\r\n        {options?.map((option, i) => {\r\n          return (\r\n            <Container key={i} variant={\"hsc\"} gap={\"base\"}>\r\n              <label htmlFor=\"check\" className=\"relative flex border items-center rounded-full cursor-pointer\">\r\n                <input\r\n                  type=\"radio\"\r\n                  name={name}\r\n                  value={option?.value}\r\n                  className=\"cursor-pointer bg-priimary peer appearance-none rounded-md border border-blue-gray-200 transition-all before:absolute before:top-2/4 before:left-2/4 before:block before:h-12 before:w-12 before:-translate-y-2/4 before:-translate-x-2/4 before:rounded-full before:bg-blue-gray-500 before:opacity-0 before:transition-opacity disabled:border-gray-200 disabled:bg-disabled disabled:cursor-not-allowed checked:border-primary  checked:before:bg-primary disabled:before:bg-none disabled:before:opacity-0 hover:before:bg-primary hover:before:opacity-10\"\r\n                  onChange={onChange}\r\n                  checked={option?.value === value}\r\n                  {...attrsInput}\r\n                />\r\n                <div\r\n                  className={clsx({\r\n                    \"peer-checked:flex hidden absolute mx-auto ml-1 w-3 h-3 rounded-full bg-primary \": true,\r\n                    \"!bg-gray-200\": attrsInput?.disabled && option?.value === value,\r\n                  })}\r\n                />\r\n              </label>\r\n              <label htmlFor=\"check\" className=\"mt-px cursor-pointer select-none\">\r\n                {option?.label}\r\n              </label>\r\n            </Container>\r\n          );\r\n        })}\r\n      </Container>\r\n    </ContainerInput>\r\n  );\r\n};\r\n\r\nexport default InputRadioButton;\r\n",
  "InputSelect": "/* eslint-disable @typescript-eslint/ban-ts-comment */\r\n/* eslint-disable react/jsx-no-useless-fragment */\r\n/* eslint-disable react/jsx-handler-names */\r\nimport { IconClose } from \"@assets/icons\";\r\nimport IconChevronToggle from \"@assets/icons/IconChevronToggle\";\r\nimport Badge from \"@components/ui/Badge\";\r\nimport ContainerInput from \"@components/ui/inputs/ContainerInput\";\r\nimport useOnClickOutside from \"@hooks/useOnClickOutside\";\r\nimport { debounce, getFieldLabelFromOptions, isEmptyValue, spreadArrayAttemp } from \"@lib/utils/helper\";\r\nimport { TBasePropsInput, TCustomeEventOnChange, TOption } from \"@types\";\r\nimport clsx from \"clsx\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport InputMultipleCheckbox from \"./InputMultipleCheckbox\";\r\n\r\ntype TProps = {\r\n  name: string;\r\n  onChange: (e: TCustomeEventOnChange<string | string[]>) => void;\r\n  options: TOption[];\r\n  onLoadMore?: (args?: any[]) => void;\r\n} & (SingleSelectProps | MultipleSelectProps);\r\n\r\ninterface SingleSelectProps extends TBasePropsInput, Omit<React.HTMLProps<HTMLInputElement>, \"onChange\"> {\r\n  isMultiple?: false;\r\n  value: string;\r\n  withSelectAll?: false;\r\n}\r\n\r\ninterface MultipleSelectProps extends TBasePropsInput, Omit<React.HTMLProps<HTMLInputElement>, \"onChange\"> {\r\n  isMultiple: true;\r\n  value: string[];\r\n  withSelectAll?: boolean;\r\n}\r\n\r\nconst InputSelect = (props: TProps) => {\r\n  const { options, isMultiple, withSelectAll, onLoadMore, ...attrs } = props;\r\n\r\n  const refContainerDropdown = useRef<HTMLDivElement | null>(null);\r\n  const refContainerValue = useRef<HTMLDivElement | null>(null);\r\n  const refIconChevron = useRef<HTMLDivElement | null>(null);\r\n  const refInput = useRef<HTMLInputElement | null>(null);\r\n\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [isSearch, setIsSearch] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  useOnClickOutside<HTMLDivElement>({\r\n    ref: refContainerDropdown,\r\n    refExceptions: [refIconChevron, refInput, refContainerValue],\r\n    handler: () => {\r\n      setIsOpen(false);\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!isMultiple) {\r\n      const labelOfValue = getFieldLabelFromOptions({ array: options, value: attrs?.value });\r\n      setSearchQuery(labelOfValue || \"\");\r\n    }\r\n  }, [attrs.value]);\r\n\r\n  useEffect(() => {\r\n    if (refInput?.current && isMultiple) {\r\n      refInput.current.style.width = `${searchQuery?.length * 10 || 10}px`;\r\n    }\r\n  }, [searchQuery, isMultiple]);\r\n\r\n  useEffect(() => {\r\n    if (searchQuery && onLoadMore) {\r\n      debouncedLoadMoreOptions();\r\n    }\r\n  }, [searchQuery]);\r\n\r\n  const handleOnClickOption = (e: React.KeyboardEvent<HTMLInputElement> | React.MouseEvent<HTMLDivElement, MouseEvent>, data: TOption) => {\r\n    e?.stopPropagation();\r\n    let valueUpdates: string[] | string = data?.value;\r\n\r\n    if (isMultiple && Array.isArray(attrs?.value)) {\r\n      const isSelected = attrs?.value?.some((singleValue) => singleValue === data?.value);\r\n      valueUpdates = isSelected ? attrs?.value?.filter((data) => data !== valueUpdates) : (spreadArrayAttemp({ newValue: valueUpdates, array: attrs?.value }) as string[]);\r\n    } else {\r\n      setIsOpen(false);\r\n    }\r\n    attrs?.onChange({\r\n      target: {\r\n        name: attrs?.name,\r\n        value: valueUpdates,\r\n      },\r\n    });\r\n    setSearchQuery(\"\");\r\n    setIsSearch(false);\r\n  };\r\n\r\n  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSearchQuery(e.target.value);\r\n  };\r\n\r\n  const handleOnClearValue = () => {\r\n    if (isMultiple) {\r\n      setSearchQuery(\"\");\r\n    } else {\r\n      attrs?.onChange({\r\n        target: {\r\n          name: attrs?.name,\r\n          value: \"\",\r\n        },\r\n      });\r\n      setSearchQuery(\"\");\r\n    }\r\n  };\r\n\r\n  const handleOnScroll = (e: React.UIEvent<HTMLDivElement>) => {\r\n    const bottom = e.currentTarget.scrollHeight - e.currentTarget.scrollTop === e.currentTarget.clientHeight;\r\n    if (bottom && onLoadMore) {\r\n      onLoadMore();\r\n    }\r\n  };\r\n\r\n  // @ts-ignore\r\n  const debouncedLoadMoreOptions = useRef(debounce(onLoadMore, 1000)).current;\r\n  const filteredOptions = options?.filter((option) => String(option?.label)?.toLowerCase().includes(searchQuery?.toLowerCase()));\r\n\r\n  return (\r\n    <ContainerInput<React.HTMLProps<HTMLInputElement>>\r\n      {...attrs}\r\n      isClerable\r\n      onCustomeClearHandler={handleOnClearValue}\r\n      customeClearValue={isMultiple ? searchQuery : String(attrs?.value) || searchQuery}\r\n      customeElement={{\r\n        ...attrs?.customeElement,\r\n        end: (\r\n          <span\r\n            className={`${isEmptyValue(attrs?.value) && attrs?.variant === \"v6\" && \"-mt-1\"}`}\r\n            ref={refIconChevron}\r\n            onClick={(e) => {\r\n              e?.preventDefault();\r\n              e?.stopPropagation();\r\n              const updateIsOpen = !isOpen;\r\n              if (updateIsOpen) {\r\n                refInput?.current?.focus();\r\n              }\r\n              setIsOpen(updateIsOpen);\r\n            }}\r\n          >\r\n            <IconChevronToggle isOpen={isOpen} />\r\n          </span>\r\n        ),\r\n      }}\r\n      customeClass={{\r\n        ...attrs?.customeClass,\r\n        ciV1: \"\",\r\n        ciV2: \" flex-no-wrap max-w-full\",\r\n        input: \"min-w-0\",\r\n        ciV4: \"!inline-block \",\r\n        label: `${isEmptyValue(attrs?.value) && attrs?.variant === \"v6\" && !isOpen ? \"scale-100 -translate-y-1 \" : \"\"} `,\r\n      }}\r\n      childrenOverlay={\r\n        <div\r\n          ref={refContainerDropdown}\r\n          className={clsx({\r\n            \"absolute  z-10 mt-2 origin-bottom-right rounded-md bg-white  ring-1 ring-black ring-opacity-5 focus:outline-none\": true,\r\n            \" h-auto shadow-lg w-full\": isOpen,\r\n            \" h-0 shadow-none\": !isOpen,\r\n          })}\r\n        >\r\n          {isMultiple && isOpen && (\r\n            // @ts-ignore\r\n            <InputMultipleCheckbox\r\n              options={filteredOptions}\r\n              {...attrs}\r\n              onScroll={handleOnScroll}\r\n              customeClassMulCheckbox={{\r\n                containerOption: \"!px-0 !py-1 !max-h-[10rem] !flex-nowrap !overflow-y-scroll\",\r\n                containerCheckbox: \"!px-4 !py-1\",\r\n              }}\r\n              label={\"\"}\r\n              onChange={(e) => {\r\n                attrs?.onChange(e);\r\n                setSearchQuery(\"\");\r\n              }}\r\n              withSelectAll={withSelectAll || false}\r\n            />\r\n          )}\r\n          {!isMultiple && isOpen && (\r\n            <div onScroll={handleOnScroll} className=\"py-0 overflow-y-auto max-h-[10rem]\">\r\n              {filteredOptions?.map((option, i) => {\r\n                const isSelected = option?.value === attrs?.value;\r\n                return (\r\n                  <div\r\n                    key={i}\r\n                    onMouseDown={(e) => e.preventDefault()}\r\n                    onClick={(e: React.MouseEvent<HTMLDivElement, MouseEvent>) => handleOnClickOption(e, option)}\r\n                    className={clsx({\r\n                      \"hover:bg-gray-100 block px-4 py-2 cursor-pointer \": true,\r\n                      \"!bg-primary-50 text-primary-700 \": isSelected,\r\n                      \"!bg-gray-100\": isSearch && i === 0 && searchQuery,\r\n                    })}\r\n                  >\r\n                    {option?.label}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </div>\r\n      }\r\n    >\r\n      {(attrsInput) => (\r\n        <div\r\n          ref={refContainerValue}\r\n          className={clsx({\r\n            \"flex shrink gap-2 flex-wrap  overflow-x-auto  scrollbar-hidden\": true,\r\n          })}\r\n          onClick={() => {\r\n            if (isMultiple) {\r\n              const updateIsOpen = !isOpen;\r\n              if (updateIsOpen) {\r\n                refInput?.current?.focus();\r\n              }\r\n              setIsOpen(updateIsOpen);\r\n            }\r\n          }}\r\n        >\r\n          <div className=\" w-full cursor-pointer flex flex-wrap gap-1 h-full \">\r\n            {isMultiple &&\r\n              (attrs?.value as string[])?.map((data, i: number) => {\r\n                const labelValue = getFieldLabelFromOptions({ array: options, value: data });\r\n                return (\r\n                  <Badge\r\n                    key={i}\r\n                    label={\r\n                      <div className=\"flex gap-1 items-center\">\r\n                        {labelValue}\r\n                        <div onClick={(e) => handleOnClickOption(e, { label: labelValue, value: data })}>\r\n                          <IconClose className=\"icon-primary icon-primary-fill\" />\r\n                        </div>\r\n                      </div>\r\n                    }\r\n                  />\r\n                );\r\n              })}\r\n            <input\r\n              {...attrsInput}\r\n              onFocus={() => {\r\n                setIsOpen(true);\r\n              }}\r\n              id={attrsInput?.name}\r\n              onChange={(e) => {\r\n                e?.stopPropagation();\r\n                setIsSearch(true);\r\n                handleSearchChange(e);\r\n                setIsOpen(true);\r\n              }}\r\n              value={searchQuery}\r\n              placeholder={attrs?.variant === \"v2\" ? \"\" : attrsInput?.placeholder || \"\"}\r\n              ref={refInput}\r\n              // onKeyDown={handleKeyDown}\r\n              autoComplete={\"off\"}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </ContainerInput>\r\n  );\r\n};\r\n\r\nexport default InputSelect;\r\n",
  "InputTextArea": "import ContainerInput from \"@components/ui/inputs/ContainerInput\";\r\nimport { TBasePropsInput } from \"@types\";\r\nimport React from \"react\";\r\n\r\ninterface TProps extends TBasePropsInput, React.HTMLProps<HTMLTextAreaElement> {\r\n  name: string;\r\n  value: string;\r\n  onChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\r\n}\r\n\r\nconst InputTextArea = (props: TProps) => {\r\n  const { ...attrs } = props;\r\n  return (\r\n    <ContainerInput<React.HTMLProps<HTMLTextAreaElement>>\r\n      customeClass={{\r\n        ...attrs?.customeClass,\r\n        ciV2: `${attrs?.customeClass?.ciV2} ${attrs?.variant === \"v3\" && \" !rounded-[1.5rem]\"}`,\r\n      }}\r\n      {...attrs}\r\n    >\r\n      {(attrsInput) => <textarea {...attrsInput} placeholder={attrs?.variant === \"v2\" ? \"\" : attrsInput?.placeholder || \"\"} />}\r\n    </ContainerInput>\r\n  );\r\n};\r\n\r\nexport default InputTextArea;\r\n",
  "List": "import { TItemList } from \"@types\";\r\nimport Badge from \"./Badge\";\r\nimport variantBadge from \"@lib/utils/variants/ui/variant-badge\";\r\nimport { cn } from \"@lib/utils/helper\";\r\n\r\ninterface TProps {\r\n  items: TItemList[];\r\n  customeClass?: {\r\n    ul?: string;\r\n    li?: string;\r\n    label?: string;\r\n  };\r\n  title?: string;\r\n  variantBadge?: {\r\n    [key: number]: keyof typeof variantBadge;\r\n  };\r\n  defaultIconLi? :  React.ReactNode;\r\n  customeIconLi? :  {\r\n    [key: number]: React.ReactNode;\r\n  };\r\n}\r\n\r\nconst List = (props: TProps) => {\r\n  const { title, items, customeClass,defaultIconLi:defaultIconLiProp, variantBadge, customeIconLi,...attrs } = props;\r\n  \r\n  const defaultIconLi=defaultIconLiProp??\"🌸\"??<div className=\"w-[0.35rem] h-[0.35rem] mt-2 flex-shrink-0 bg-gray-500 rounded-[50%]\"/>\r\n  \r\n\r\n  const renderItems = (items: TItemList[], level: number) => {\r\n    return (\r\n      <ul\r\n        className={cn({\r\n          \"px-4 flex flex-col \": true,\r\n          [customeClass?.ul || \"\"]: customeClass?.ul,\r\n        })}\r\n        {...attrs}\r\n      >\r\n        {items.map((item, i) => (\r\n          <li key={i} className={cn({\r\n            'mb-0 inline-flex gap-2':true,\r\n            \"my-1\":item?.label,\r\n            [customeClass?.li||'']:customeClass?.li,\r\n          })}>\r\n            {customeIconLi?.[level] ?? defaultIconLi}\r\n            <div>\r\n              {item.label && (\r\n                <Badge\r\n                label={item.label}\r\n                variant={variantBadge?.[level] || \"soft-primary\"}\r\n                className={cn({\r\n                  \"mr-2 \": true,\r\n                  [customeClass?.label || \"\"]: customeClass?.label,\r\n                })}\r\n              />\r\n              )}\r\n              {item.content}\r\n              {item.childs && renderItems(item.childs, level + 1)}\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {title && <Badge label={title} variant={\"soft-warning\"} />}\r\n      {renderItems(items, 0)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n",
  "Logo": "import Button from \"@components/ui/Button\"\r\nimport { cn } from \"@lib/utils/helper\"\r\nimport { VariantProps, cva } from \"class-variance-authority\"\r\n\r\ninterface TProps extends React.HTMLProps<HTMLLinkElement>, VariantProps<typeof logoVariants> {\r\n\r\n}\r\n\r\nconst Logo = (props: TProps) => {\r\n    const { className, sizeLogo, } = props\r\n    return (\r\n        <Button label=\"Cb199\" to=\"/\" className={cn(logoVariants({ className: `${className}`, sizeLogo, }))} />\r\n\r\n    )\r\n}\r\n\r\n\r\nconst logoVariants = cva(\r\n    'w-fiit inline font-staryssa text-primary flex gap-2 items-center font-bold',\r\n    {\r\n        variants: {\r\n            variant: {\r\n                'clickable': 'cursor-pointer-custome',\r\n                'none': ''\r\n            },\r\n            sizeLogo: {\r\n                'small': 'text-[14px]',\r\n                'base': 'text-[18px]',\r\n                'large': 'text-[28px]'\r\n            }\r\n        },\r\n\r\n        defaultVariants: {\r\n            variant: \"clickable\",\r\n            sizeLogo: 'base'\r\n        }\r\n    }\r\n)\r\n\r\n\r\nexport default Logo",
  "ContainerModal": "import { IconClose } from \"@assets/icons\";\r\nimport \"@assets/styles/ui/modal.css\";\r\nimport Button from \"@components/ui/Button\";\r\nimport { cn } from \"@lib/utils/helper\";\r\nimport { TBaseModal } from \"@types\";\r\nimport { VariantProps, cva } from \"class-variance-authority\";\r\nimport clsx from \"clsx\";\r\n\r\nexport interface TModalProps extends TBaseModal, VariantProps<typeof modalVariants> {\r\n    customeClass?: {\r\n        mdContent?: string;\r\n    };\r\n    className?: string;\r\n}\r\n\r\n\r\nconst ContainerModal = (props: TModalProps) => {\r\n    const { isShow, customeClass, className, onClose: handleOnClose, children, variant = \"fadein-scaleup\" } = props\r\n\r\n    const handleStopPropagation = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.stopPropagation()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className={cn(modalVariants({\r\n                    variant,\r\n                    className: clsx({\r\n                        \"md-modal \": true,\r\n                        \"md-show flex \": isShow,\r\n                        [className || '']: className\r\n                    })\r\n                }))}\r\n            >\r\n                <div\r\n                    className={cn({\r\n                        'md-content bottom-0 relative  flex flex-col gap-2  w-full ': true,\r\n                        [customeClass?.mdContent || '']: customeClass?.mdContent\r\n                    })}\r\n                    onClick={handleStopPropagation}\r\n                >\r\n                    <Button\r\n                        label={<IconClose />}\r\n                        className=\"absolute top-2 right-2 rounded-full w-[2rem] h-[2rem] \"\r\n                        variant={\"plain\"}\r\n                        onClick={handleOnClose}\r\n                    />\r\n                    <div className='max-h-[90vh] flex overflow-y-auto p-2'>\r\n                        {children}\r\n                    </div>\r\n                </div>\r\n            </div >\r\n\r\n            <div className={`${isShow ? \"md-show\" : \"\"} md-overlay h-screen max-h-screeen`}></div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst modalVariants = cva(\r\n    ' min-w-full p-4 md:min-w-[20rem] max-w-[90%] ',\r\n    {\r\n        variants: {\r\n            variant: {\r\n                \"fadein-scaleup\": \"md-fadein-scaleup min-h-[10rem]\", // Fade in and scale up\r\n                \"slide-from-right\": \"md-slide-from-right min-h-[10rem]\", // Slide from the right \r\n                \"drawer\": \"md-drawer p-0 w-full\" // Drawer \r\n            },\r\n        },\r\n\r\n    }\r\n)\r\n\r\nexport default ContainerModal",
  "LabelWithModal": "import ContainerModal from '@components/ui/modal/ContainerModal';\r\nimport React, { useState } from 'react';\r\n\r\ninterface TProps {\r\n    content: React.ReactNode;\r\n    label: React.ReactNode;\r\n}\r\n\r\nconst LabelWithModal = (props: TProps) => {\r\n    const { content, label } = props\r\n    const [showModal, setShowModal] = useState(false)\r\n\r\n    const handleToggleModal = () => {\r\n        setShowModal(!showModal)\r\n    }\r\n\r\n    return (\r\n        <div className='inline-block '>\r\n            <span className='cursor-pointer text-primary' onClick={handleToggleModal}>{label}</span>\r\n            <ContainerModal isShow={showModal} onClose={handleToggleModal} customeClass={{ mdContent: \"py-8\" }}>\r\n                {content}\r\n            </ContainerModal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LabelWithModal",
  "ModalConfirmation": "import Button from '@components/ui/Button';\r\nimport ContainerModal from '@components/ui/modal/ContainerModal';\r\nimport { TBaseModal } from '@types';\r\n\r\ninterface TProps extends TBaseModal {\r\n    title?: string;\r\n    button?: {\r\n        cancel: {\r\n            name?: string;\r\n            onClick: () => void;\r\n        },\r\n        confirm: {\r\n            name?: string;\r\n            onClick: () => void;\r\n        }\r\n    }\r\n    customeClass?: {\r\n        header?: string;\r\n        body?: string;\r\n        footer?: string;\r\n    }\r\n}\r\n\r\nconst ModalConfirmation = (props: TProps) => {\r\n    const { title, isShow, children, onClose: handleOnClose, button, customeClass } = props;\r\n\r\n    const handleConfirmationBtn = () => {\r\n        button?.confirm.onClick && button?.confirm?.onClick()\r\n    }\r\n    return (\r\n        <ContainerModal isShow={isShow} onClose={handleOnClose}>\r\n\r\n            {\r\n                title && <div className={`md-header ${customeClass?.header}`}>\r\n                    <p className=\"md-title font-bold text-gray-900 text-body-large\">{title}</p>\r\n                </div>\r\n            }\r\n\r\n            <div className={`md-body w-[25.6rem] text-gray ${customeClass?.body}`}>{children}</div>\r\n            <div className={`md-footer mb-auto justify-end flex gap-2 ${customeClass?.footer}`}>\r\n                <Button className='min-w-[5rem]' variant={\"solid-white\"} onClick={handleOnClose} label={button?.cancel?.name || \"Cancel\"} />\r\n                <Button className='min-w-[5rem]' onClick={handleConfirmationBtn} label={button?.confirm?.name || \"Confirm\"} />\r\n            </div>\r\n        </ContainerModal>\r\n    )\r\n}\r\n\r\nexport default ModalConfirmation",
  "NestedMenu": "import IconChevronToggle from \"@assets/icons/IconChevronToggle\";\r\nimport Button from \"@components/ui/Button\";\r\nimport { cn, isEmptyValue } from \"@lib/utils/helper\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport interface TMenuItem {\r\n    id: string;\r\n    name: string;\r\n    url?: string;\r\n    parentId: string | null;\r\n    childs?: TMenuItem[];\r\n    level?: number;\r\n}\r\n\r\ninterface TLevelSetting {\r\n    customeClass?: {\r\n        label?: string;\r\n    };\r\n}\r\n\r\nexport interface TMenuSettings {\r\n    [level: number]: TLevelSetting;\r\n    activeMenu: TMenuItem\r\n    openMenus: { [key: string]: boolean }\r\n}\r\n\r\nexport interface TParamsOnChangeMenu {\r\n    groupMenu: TMenuItem\r\n    level: number;\r\n    parentId: string;\r\n}\r\n\r\ninterface TProps {\r\n    menu: TMenuItem[];\r\n    onChangeMenu: (params: TParamsOnChangeMenu) => any;\r\n    level?: number;\r\n    isOpen?: boolean;\r\n    parentId?: string;\r\n    setting: TMenuSettings;\r\n    setSetting: React.Dispatch<React.SetStateAction<TMenuSettings>>\r\n\r\n}\r\n\r\nconst NestedMenu = (props: TProps) => {\r\n    return <RenderMenu {...props} isOpen={true} />;\r\n};\r\n\r\nconst RenderMenu = (props: TProps) => {\r\n    const location = useLocation();\r\n\r\n    const { setting, menu, setSetting, level = 0, parentId, isOpen, onChangeMenu: handleOnChangeMenu } = props;\r\n\r\n    const handleOnClickMenu = (groupMenu: TMenuItem) => {\r\n        let updateSetting = setting\r\n        if (isEmptyValue(groupMenu?.childs)) {\r\n            updateSetting = {\r\n                ...setting,\r\n                activeMenu: {\r\n                    ...setting?.activeMenu,\r\n                    level: level,\r\n                    id: groupMenu?.id,\r\n                    name: groupMenu?.name,\r\n                    parentId: parentId || \"\",\r\n                    url: \"\"\r\n                }\r\n            }\r\n        } else {\r\n            updateSetting = {\r\n                ...setting,\r\n                openMenus: {\r\n                    ...setting.openMenus,\r\n                    [groupMenu.id]: !setting.openMenus[groupMenu.id]\r\n                }\r\n            }\r\n        }\r\n\r\n        sessionStorage.setItem('setting', JSON.stringify(updateSetting))\r\n        setSetting(updateSetting);\r\n        handleOnChangeMenu({\r\n            groupMenu,\r\n            parentId: parentId || \"\",\r\n            level: level\r\n        })\r\n    };\r\n\r\n    return (\r\n        <ul className={cn({\r\n            \"flex flex-col  opacity-0 max-h-0 overflow-y-auto transition-all duration-300 ease\": true,\r\n            \"border-l scrollbar-hidden \": level > 0,\r\n            \" ml-2\": level > 0,\r\n            \"opacity-100 max-h-full\": isOpen,\r\n        })}>\r\n            {menu?.map((groupMenu: TMenuItem, i) => (\r\n                <li key={i} className={cn({\r\n                    \"scrollbar-hidden \": true,\r\n                    ' pr-4 ': level == 0\r\n                })}>\r\n                    <div\r\n                        onClick={() => handleOnClickMenu(groupMenu)}\r\n                        className={cn({\r\n                            \"flex items-center py-1\": true,\r\n                            \"\": level > 0\r\n                        })}\r\n                    >\r\n                        <Button\r\n                            to={groupMenu?.url || location.pathname}\r\n                            className={cn({\r\n                                \"w-full !py-1 !pl-2 b\": true,\r\n                                \"border-l bg-primary-50 w-full rounded-tr-md rounded-br-md border-primary-700 font-semibold \": setting?.activeMenu.id === groupMenu?.id && groupMenu.url,\r\n                                [setting?.[level]?.customeClass?.label || \"\"]: setting?.[level]?.customeClass?.label\r\n                            })}\r\n                            label={groupMenu?.name}\r\n                        />\r\n\r\n                        {!isEmptyValue(groupMenu?.childs) && (\r\n                            <IconChevronToggle className={` icon-primary h-[1.1rem]`} variant=\"2\" isOpen={setting?.openMenus[groupMenu.id]} />\r\n                        )}\r\n                    </div>\r\n\r\n                    {!isEmptyValue(groupMenu?.childs) && (\r\n                        <RenderMenu\r\n                            menu={groupMenu?.childs as TMenuItem[]}\r\n                            parentId={groupMenu?.id}\r\n                            level={level + 1}\r\n                            setting={setting}\r\n                            setSetting={setSetting}\r\n                            onChangeMenu={handleOnChangeMenu}\r\n                            isOpen={setting?.openMenus[groupMenu.id]}\r\n                        />\r\n                    )}\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n\r\n\r\nexport default NestedMenu;\r\n",
  "Progressbar": "import { cn } from \"@lib/utils/helper\";\r\nimport Badge from \"./Badge\";\r\n\r\ninterface TProps {\r\n    value: number;\r\n    valueTotal?: number;\r\n    customeClass?: {\r\n        container?: string;\r\n        containerProgressbar?: string;\r\n        progressbar?: string;\r\n        containerLabel?: string;\r\n        label?: string;\r\n    };\r\n    size?: \"base\";\r\n    variant?  : \"base\"|\"trailing-label\"|\"title-label\"|\"top-floating-label\"|\"bottom-floating-label\"|\"within-progress-bar\" |'steps'\r\n}\r\n\r\nconst Progressbar = (props: TProps) => {\r\n    const { value,variant=\"base\" , valueTotal=100, customeClass, size = \"base\" } = props;\r\n    const percentage = (value / valueTotal) * 100\r\n\r\n    // >>-Animation Progress bar\r\n    // const [width, setWidth] = useState(0);\r\n    // useEffect(() => {\r\n    //     const interval = setInterval(() => {\r\n    //         const nextWidth = width + 10;\r\n    //         if (nextWidth <= 100) {\r\n    //             setWidth(nextWidth);\r\n    //         } else {\r\n    //             setWidth(0);\r\n    //         }\r\n    //     }, 500); \r\n\r\n    //     return () => clearInterval(interval);\r\n    // }, [width, valueTotal]); \r\n    const labelComp =(\r\n        <label \r\n            style={{marginLeft:[\"top-floating-label\",\"bottom-floating-label\"]?.includes(variant)&& value!==0? `${percentage-5}%`:0}} \r\n            className={cn({\r\n                [customeClass?.label||'']:customeClass?.label,\r\n                ['mb-2 ']:[\"top-floating-label\"]?.includes(variant),\r\n            })}>\r\n            {\r\n                [\"top-floating-label\",\"bottom-floating-label\"]?.includes(variant) ? <Badge shape={\"rounded\"} variant={\"softborder-primary\"} label={`${percentage}%`}/>:`${percentage}%`\r\n            }\r\n        </label>\r\n    )\r\n    return (\r\n        <div className={cn({\r\n            'relative w-full flex flex-col ':true,\r\n            \"flex-col-reverse gap-2\":variant==\"bottom-floating-label\",\r\n            'flex-row-reverse gap-2 items-center':variant==\"base\",\r\n            [customeClass?.container||'']:customeClass?.container\r\n        })}>\r\n            {\r\n                variant!==\"within-progress-bar\" && labelComp\r\n            }\r\n            <div className={cn({\r\n                'bg-gray-100 w-full rounded-full min-w-[5rem]':true,\r\n                [customeClass?.containerProgressbar||'']:customeClass?.containerProgressbar,\r\n                'h-[10px] text-body-base':size==\"base\",\r\n                \"h-[20px]\":variant===\"within-progress-bar\"\r\n            })} >\r\n                <div\r\n                    style={{ width: `${percentage}%` }}\r\n                    className={`bg-primary flex items-center justify-center text-center text-white h-full transition-all duration-300 rounded-full ${customeClass?.progressbar}`}\r\n                >\r\n                    {variant===\"within-progress-bar\" &&labelComp}\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Progressbar;\r\n",
  "ProgressStep": "/* eslint-disable no-nested-ternary */\r\nimport { cn } from \"@lib/utils/helper\";\r\n\r\nexport interface TProgressStepProps {\r\n  activeStep?: number;\r\n  listStep: {\r\n    title: string | React.ReactNode;\r\n    caption?: string | React.ReactNode;\r\n  }[];\r\n  variant?: \"horizontal\" | \"vertical\";\r\n  type?: \"number\" | \"default\" | \"dot\";\r\n  shapeItem?: \"rounded\" | \"circle\";\r\n  customeClass?: {\r\n    spanIcon?: string;\r\n    stepperWrapper?: string;\r\n    stepperIcon?: string;\r\n    stepperItem?: string;\r\n  };\r\n}\r\n\r\nconst ProgressStep = (props: TProgressStepProps) => {\r\n  const { listStep, shapeItem = \"circle\", activeStep, variant = \"horizontal\", type = \"default\", customeClass } = props;\r\n\r\n  const IconCheckPS = (props: any) => (\r\n    <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\r\n      <path\r\n        fillRule=\"evenodd\"\r\n        clipRule=\"evenodd\"\r\n        d=\"M3.77479 7.96683L10.3748 1.2446C11.0415 0.566826 12.0526 1.35572 11.2192 2.2446C11.2192 2.2446 4.8859 10.2002 4.55257 10.6557C4.45292 10.8165 4.31387 10.9492 4.14859 11.0412C3.98332 11.1332 3.79729 11.1815 3.60812 11.1815C3.41896 11.1815 3.23293 11.1332 3.06765 11.0412C2.90237 10.9492 2.76333 10.8165 2.66368 10.6557L0.585899 7.10016C0.480309 6.90724 0.447141 6.68293 0.492376 6.46771C0.537611 6.25248 0.65827 6.06051 0.83259 5.92641C1.00691 5.79232 1.22341 5.72494 1.44304 5.73643C1.66267 5.74791 1.87096 5.83751 2.03034 5.98905L3.77479 7.96683Z\"\r\n        fill=\"white\"\r\n      />\r\n    </svg>\r\n  );\r\n\r\n  return (\r\n    <ul className={`stepper-wrapper ${customeClass?.stepperWrapper} w-full ${variant === \"vertical\" && \"vertical flex justify-start items-start flex-col\"}`}>\r\n      {listStep?.map((data, i) => {\r\n        const isCompleted = activeStep ? (variant === \"vertical\" ? activeStep < i : activeStep > i) : false;\r\n        const isActive = activeStep === i;\r\n        return (\r\n          <li key={i} className={`stepper-item ${customeClass?.stepperItem} w-full ${type} ${variant} ${isActive && \"active\"} ${isCompleted && \"completed\"}`}>\r\n            <div className=\"\">\r\n              <div\r\n                className={cn({\r\n                  [`step-counter ${variant} w-[2rem] relative z-[5] flex items-center justify-center  bg-white py-3`]: true,\r\n                  \"h-[1rem]\": type === \"dot\",\r\n                })}\r\n              >\r\n                <span\r\n                  className={cn({\r\n                    \"flex justify-center items-center rounded-sm\": true,\r\n\r\n                    \"rounded-full\": shapeItem === \"circle\",\r\n\r\n                    \"bg-primary p-1 text-white border-primary\": isCompleted,\r\n                    \"border-primary  bg-white border-[2px] ring-4 ring-primary-200\": isActive,\r\n\r\n                    \"w-4 h-4\": type === \"default\",\r\n                    \"!w-3 !h-3 mb-1\": isActive && type === \"default\",\r\n                    \"border-[2px]\": type === \"default\" && !isCompleted && !isActive,\r\n\r\n                    \"w-[1.5rem] h-[1.5rem] !text-body-small !bg-primary-100 !border-[1px] !border-primary-100  font-medium text-primary-700 \": type === \"number\",\r\n\r\n                    \"!w-3 !h-3 !bg-primary-100\": type === \"dot\",\r\n                    [customeClass?.spanIcon || \"\"]: customeClass?.spanIcon || \"\",\r\n                  })}\r\n                >\r\n                  {isCompleted && <IconCheckPS />}\r\n                  {type === \"number\" && i + 1}\r\n                  {type === \"dot\" && \"\"}\r\n                </span>\r\n              </div>\r\n            </div>\r\n            {variant === \"horizontal\" ? (\r\n              <div className={`step-name ${variant}`}>{data?.title}</div>\r\n            ) : (\r\n              <div className=\"min-h-[1rem]\">\r\n                <div\r\n                  className={cn({\r\n                    \"step-title text-gray \": true,\r\n                    \"mt-3\": type === \"number\",\r\n                    \"mt-2\": type === \"default\",\r\n                  })}\r\n                >\r\n                  {data?.title}\r\n                </div>\r\n                <div className=\"step-caption font-normal text-gray-500 mt-2 mb-8 flex flex-col gap-4 \">{data?.caption}</div>\r\n              </div>\r\n            )}\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ProgressStep;\r\n",
  "Skeleton": "/* eslint-disable @typescript-eslint/ban-ts-comment */\r\n\r\nimport { cn } from \"@lib/utils/helper\";\r\nimport { HTMLProps, useEffect, useRef, useState } from \"react\";\r\n\r\ninterface TProps extends HTMLProps<HTMLDivElement> {\r\n    children: React.ReactNode;\r\n    isLoading: boolean;\r\n    type?: \"text\" | \"block\"\r\n    width?: number | string;\r\n    height?: number | string;\r\n    totalSkeleton?: number;\r\n}\r\n\r\nconst Skeleton = (props: TProps) => {\r\n    const { children, className, isLoading = false, type = \"text\", ...otherProps } = props;\r\n    const contentRefs = useRef<(HTMLDivElement)>(null);\r\n    const [totalSkeleton, setTotalSkeleton] = useState(0)\r\n    const [skeletonStyle, setSkeletonStyle] = useState({\r\n        width: 0,\r\n        height: 0,\r\n        borderRadius: \"\"\r\n    })\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            const elmnContent = contentRefs?.current?.firstChild as any\r\n            if (elmnContent && type == \"text\") {\r\n                const lineHeight = parseFloat(getComputedStyle(elmnContent).lineHeight);\r\n                const lines = Math.ceil(elmnContent.offsetHeight / lineHeight);\r\n                setSkeletonStyle({\r\n                    width: elmnContent.offsetWidth,\r\n                    height: lineHeight - 8,\r\n                    borderRadius: \"0.5rem\"\r\n                });\r\n                setTotalSkeleton(lines || 0)\r\n            }\r\n            if (elmnContent && type === \"block\") {\r\n                const computedStyles = window.getComputedStyle(elmnContent as Element);\r\n                const borderRadius = computedStyles.borderRadius;\r\n                setSkeletonStyle({\r\n                    width: elmnContent.offsetWidth,\r\n                    height: elmnContent.offsetHeight,\r\n                    borderRadius\r\n                });\r\n                setTotalSkeleton(1)\r\n\r\n            }\r\n\r\n        }, 600)\r\n    }, [children])\r\n\r\n    return (\r\n        <div\r\n            className={cn({\r\n                'w-fit h-auto relative  text-wrap flex flex-col': true,\r\n                [className || '']: className\r\n            })}\r\n            {...otherProps}\r\n        >\r\n            <div ref={contentRefs} className={cn({\r\n                \"w-full\": true,\r\n                'opacity-0': isLoading\r\n            })}>\r\n                {children}\r\n            </div>\r\n\r\n            {\r\n                (isLoading && totalSkeleton > 0) && <span className=\" absolute top-1 left-0 flex flex-col gap-2  \">\r\n                    {\r\n                        [...new Array(totalSkeleton)]?.map((_, i) => <div key={i}\r\n                            style={skeletonStyle}\r\n                            className={cn({\r\n                                \"animate-pulse  bg-gray-300  shadow \": true\r\n                            })}>\r\n                        </div>)\r\n                    }\r\n                </span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Skeleton;\r\n",
  "Table": "/* eslint-disable no-nested-ternary */\r\nimport { IconArrowUp, IconChevronLeft, IconChevronRight, IconSort } from \"@assets/icons\";\r\nimport Button from \"@components/ui/Button\";\r\nimport EmptyData from \"@components/ui/EmptyData\";\r\nimport InputCheckbox from \"@components/ui/inputs/InputCheckbox\";\r\nimport { cn } from \"@lib/utils/helper\";\r\nimport { TColumn, TSettingTable } from \"@types\";\r\nimport React from \"react\";\r\n\r\ntype WithId<T> = T & { id: string | number };\r\ntype WithOptionalChecked<T, TInclude extends boolean> = TInclude extends true ? T & { isChecked: boolean } : T & { isChecked?: never }; // Adjusted here\r\n\r\nexport interface TTableProps<TData, TIncludeChecked extends boolean = false> {\r\n    columns: TColumn<TData, keyof TData>[];\r\n    data: WithId<WithOptionalChecked<TData, TIncludeChecked>>[];\r\n    setData: React.Dispatch<React.SetStateAction<WithOptionalChecked<TData, TIncludeChecked>[]>>\r\n    setting: TSettingTable<TData>\r\n    onChange: (params: any) => void;\r\n    isLoading?: boolean;\r\n    withNo?: boolean;\r\n}\r\n\r\n\r\nconst Table = <TData, TIncludeChecked extends boolean = false>(props: TTableProps<TData, TIncludeChecked>) => {\r\n    const { columns, isLoading, data, setData, setting, onChange, withNo } = props\r\n\r\n    const isCheckedAll = data?.length > 0 ? !data?.some((dataRow: WithOptionalChecked<TData, TIncludeChecked>) => !dataRow.isChecked) : false\r\n\r\n    const handleOnChangeChecked = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const name = e.target.name\r\n        const value = e?.target?.value\r\n        const isChecked = e?.target?.checked\r\n        if (name === \"cheked-all\") {\r\n            const newData = data?.map((dataRow) => ({\r\n                ...dataRow, isChecked\r\n            }))\r\n            setData(newData)\r\n        } else {\r\n            const valueParse = JSON.parse(value)\r\n            const dataChecked = data?.map((data) => {\r\n                const isCheckedCurrData = valueParse?.id === data?.id ? isChecked : data?.isChecked\r\n                return { ...data, isChecked: isCheckedCurrData }\r\n            })\r\n            setData(dataChecked)\r\n        }\r\n    }\r\n\r\n    const handleSortColumn = (params: { key: keyof TData }) => {\r\n        const sortDir = params?.key !== setting?.sortBy ? 'desc' : setting?.sortDir === 'desc' ? 'asc' : 'desc'\r\n        if (data?.length !== 0 && !isLoading) {\r\n            onChange({\r\n                ...setting,\r\n                sortBy: params.key,\r\n                sortDir: sortDir\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleOnChangePage = (pageNumber: number) => {\r\n        onChange({\r\n            ...setting,\r\n            currentPage: pageNumber\r\n        })\r\n    }\r\n\r\n    const style = {\r\n        columnChecked: \"flex items-center justify-center py-3 px-4  align-top\",\r\n        columnData: \"py-3 px-6  align-top\",\r\n        columnNo: \"py-3 px-4   align-top\"\r\n    }\r\n\r\n    return (\r\n        <div className=\"border rounded-lg w-full\">\r\n            <div className=\"relative  overflow-y-auto  max-h-[30rem] \">\r\n                <table className={`table-auto  w-full ${data?.length === 0 && 'flex flex-col'}`}>\r\n                    <thead className=\"sticky z-[2] top-0 text-gray-500 bg-gray-50 \">\r\n                        <tr className=\"border-b\">\r\n\r\n                            {\r\n                                (setting?.checked) && (\r\n                                    <th className={`${style.columnChecked}`}>\r\n                                        <InputCheckbox\r\n                                            checked={isCheckedAll}\r\n                                            value={'cheked-all'}\r\n                                            onChange={handleOnChangeChecked}\r\n                                            name={\"cheked-all\"} />\r\n                                    </th>\r\n                                )\r\n                            }\r\n                            {\r\n                                withNo && (\r\n                                    <th className={`${style.columnNo}`}>\r\n                                        No.\r\n                                    </th>\r\n                                )\r\n                            }\r\n                            {\r\n                                columns?.map((column, i) => <th key={i}>\r\n                                    <div className={`flex ${style.columnData}  items-center text-center ${column?.className}`}>\r\n                                        {column?.name}\r\n                                        {column?.isSorted && (\r\n                                            <span onClick={() => handleSortColumn({ key: column.key })} className={`cursor-pointer ${(isLoading || data?.length === 0) && \"!cursor-not-allowed\"}`}>\r\n                                                {\r\n                                                    setting?.sortBy === column?.key ? (\r\n                                                        <IconArrowUp\r\n                                                            className={cn({\r\n                                                                'icon-gray h-[1.25rem] transition-transform duration-300': true,\r\n                                                                \"rotate-180\": setting?.sortDir === \"desc\" && setting?.sortBy === column?.key\r\n                                                            })} />\r\n                                                    ) : (\r\n                                                        <IconSort\r\n                                                            className=\"ml-1 w-[1.1rem] h-[1.1rem]\"\r\n                                                        />\r\n                                                    )\r\n                                                }\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n                                </th>)\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n                    {\r\n                        data?.length >= 0 && (\r\n                            <tbody className={`text-gray `}>\r\n                                {\r\n                                    data?.map((dataRow, i) => {\r\n                                        return (\r\n                                            <tr key={i} className=\"border-b \">\r\n                                                {\r\n                                                    setting?.checked && handleOnChangeChecked && <td className={`${style.columnChecked}`}><InputCheckbox onChange={handleOnChangeChecked} checked={dataRow?.isChecked} value={JSON.stringify(dataRow)} name={`checked-${i}`} /></td>\r\n                                                }\r\n                                                {\r\n                                                    withNo && (\r\n                                                        <td className={`${style.columnNo}`}>\r\n                                                            {(setting?.currentPage - 1) * setting?.itemsPerPage + i + 1}\r\n                                                        </td>\r\n                                                    )\r\n                                                }\r\n                                                {\r\n                                                    columns?.map((column, j) =>\r\n                                                        <td key={j} className={`${style.columnData} ${column?.className}`}>\r\n                                                            <div className=\"flex \">\r\n                                                                {\r\n                                                                    column?.customeComponent ? column?.customeComponent(dataRow) : dataRow[column.key] as string\r\n                                                                }\r\n                                                            </div>\r\n                                                        </td>\r\n                                                    )\r\n                                                }\r\n                                            </tr>\r\n                                        )\r\n                                    }\r\n\r\n                                    )\r\n                                }\r\n                            </tbody>\r\n                        )\r\n                    }\r\n                </table>\r\n                {\r\n                    data?.length === 0 && (\r\n                        <div className=\"w-full h-[20rem] flex items-center justify-center\">\r\n                            {\r\n                                isLoading ? \"Loading...\" : <EmptyData customeClass={{ container: \"w-full !border-none\", img: \"h-[5rem]\" }} />\r\n\r\n                            }\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n            {\r\n                (setting?.pagination && data?.length !== 0) && <PaginationTable<TData, TIncludeChecked>\r\n                    setting={setting}\r\n                    onChangePage={handleOnChangePage}\r\n                />\r\n\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\n\r\ntype TPropsPagination<TData, TIncludeChecked extends boolean> = Pick<TTableProps<TData, TIncludeChecked>, \"setting\"> & {\r\n    onChangePage: (params: any) => void;\r\n}\r\n\r\nconst PaginationTable = <TData, TIncludeChecked extends boolean>(props: TPropsPagination<TData, TIncludeChecked>) => {\r\n    const { setting, onChangePage: handleOnChangePage } = props\r\n\r\n    const pageNumbers = React.useMemo(() => Array.from({ length: setting.totalPage }, (_, index) => index + 1), [setting.totalPage]);\r\n    const currentPage = setting?.currentPage\r\n\r\n    const [listPageNumberStart, listPageNumberEnd] = React.useMemo(() => {\r\n        if (setting?.totalPage <= 6) return [pageNumbers, []];\r\n\r\n        const adjacentPageCount = 1;\r\n        let startIndex = currentPage - adjacentPageCount - 1;\r\n        let endIndex = currentPage + adjacentPageCount;\r\n        \r\n        if (startIndex < 0) {\r\n            startIndex = 0;\r\n            endIndex = Math.min(3, setting?.totalPage);\r\n        } else if (endIndex == pageNumbers.length - 2) {\r\n            startIndex -= 1\r\n            endIndex -= 1\r\n        } else if (endIndex >= pageNumbers?.length - 1) {\r\n            startIndex = 0\r\n            endIndex = 3\r\n        }\r\n\r\n        const startPages = pageNumbers.slice(startIndex, endIndex);\r\n        const endPages = pageNumbers.slice(setting?.totalPage - 3, setting?.totalPage);\r\n\r\n        return [startPages, endPages];\r\n    }, [setting.totalPage, currentPage, pageNumbers]);\r\n\r\n    const ButtonPageNumber = (pageNumber: number) => (\r\n        <Button\r\n            onClick={() => handleOnChangePage(pageNumber)}\r\n            variant={\"plain\"}\r\n            className={cn({\r\n                \"w-[2.5rem] h-[2.5rem]\": true,\r\n                \"!bg-gray-100 font-bold\": pageNumber === currentPage\r\n            })}\r\n            label={pageNumber}\r\n        />\r\n    )\r\n\r\n\r\n    return (\r\n        <div className=\"flex items-center justify-between px-4 py-2 border-t\">\r\n            <Button variant={\"solid-white\"} disabled={currentPage <= 1} onClick={() => handleOnChangePage(setting?.currentPage - 1)} className=\"font-medium text-gray\" label={<><IconChevronLeft /><span className=\"hidden md:block\">Previous</span></>} />\r\n\r\n            <div className=\"items-center hidden md:flex\">\r\n                {\r\n                    setting?.totalPage > 6 ? (\r\n                        <div className=\"flex items-center gap-1\">\r\n                            {listPageNumberStart.map((pageNumber, i) => <span key={i}>{ButtonPageNumber(pageNumber)}</span>)}\r\n                            {listPageNumberEnd[0] - listPageNumberStart[listPageNumberStart?.length - 1] !== 1 && <div>...</div>}\r\n                            {listPageNumberEnd?.map((pageNumber, i) => <span key={i}>{ButtonPageNumber(pageNumber)}</span>)}\r\n                        </div>\r\n                    ) : (\r\n                        pageNumbers.map((pageNumber, i) => <span key={i}>{ButtonPageNumber(pageNumber)}</span>)\r\n                    )\r\n                }\r\n            </div>\r\n            <div className=\"md:hidden\">\r\n                <p><span className=\"font-medium\">{setting?.currentPage} </span>of <span className=\"font-medium\">{setting.totalPage}</span></p>\r\n            </div>\r\n\r\n            <Button disabled={setting?.currentPage >= setting?.totalPage} onClick={() => handleOnChangePage(setting?.currentPage + 1)} variant={\"solid-white\"} className=\"font-medium text-gray\" label={<><span className=\"hidden md:block\">Next</span><IconChevronRight /></>} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table",
  "Tabs": "import { cn } from \"@lib/utils/helper\";\r\nimport { TObject, TTab } from \"@types\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\n\r\ninterface TProps {\r\n    layout?: \"horizontal\" | \"vertical\"\r\n    type?: \"bordered\" | \"pilled\";\r\n    listTab: TTab[];\r\n    customeClass?: {\r\n        container?: string;\r\n        tabList?: string;\r\n        tabItem?: string;\r\n        activeTabItem?: string;\r\n        indicator?: string;\r\n    };\r\n}\r\n\r\nconst Tabs = (props: TProps) => {\r\n    const { listTab, type = \"bordered\", customeClass, layout = \"horizontal\" } = props;\r\n    const [activeTab, setActiveTab] = useState(0);\r\n    const [bgStyle, setBgStyle] = useState({});\r\n    const tabRefs = useRef<(HTMLLIElement | null)[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (tabRefs.current[activeTab]) {\r\n            const elmnActiveTab = tabRefs.current[activeTab];\r\n            const updateBgStyle: TObject = { left: elmnActiveTab?.offsetLeft, width: elmnActiveTab?.offsetWidth }\r\n\r\n            if (layout === \"vertical\" && type === \"pilled\") {\r\n                updateBgStyle.top = elmnActiveTab?.offsetTop;\r\n                updateBgStyle.height = elmnActiveTab?.offsetHeight\r\n            }\r\n\r\n            if (layout === \"vertical\" && type == \"bordered\") {\r\n                const elmnRect = elmnActiveTab?.getBoundingClientRect();\r\n                const containerRect = elmnActiveTab?.parentElement?.getBoundingClientRect();\r\n\r\n                if (elmnRect && containerRect) {\r\n                    // Adjust top position to place the border below the tab\r\n                    updateBgStyle.top = elmnRect.bottom - containerRect.top;\r\n                }\r\n            }\r\n\r\n\r\n            setBgStyle(updateBgStyle);\r\n        }\r\n    }, [activeTab]);\r\n\r\n    const handleChangeActiveTab = (key: number) => {\r\n        setActiveTab(key);\r\n    };\r\n\r\n    return (\r\n        <div className={cn({\r\n            \"w-full flex flex-col gap-4 overflow-x-auto !overflow-visible\": true,\r\n            [customeClass?.container || '']: true,\r\n            \"flex-row gap-6\": layout === \"vertical\"\r\n        })}>\r\n            <ul className={cn({\r\n                \"flex relative \": true,\r\n                [customeClass?.tabList || \"\"]: customeClass?.tabList,\r\n                \"flex-col min-w-[10rem] \": layout === \"vertical\",\r\n                \"border-b\": layout === \"horizontal\" && type === \"bordered\"\r\n\r\n            })}>\r\n                <div\r\n                    className={cn(\"absolute bg-primary transition-all duration-300\", {\r\n                        \"bottom-0 h-[1px]\": type === \"bordered\",\r\n                        \"bottom-0 h-full rounded-md\": type === \"pilled\",\r\n                        [customeClass?.indicator || \"\"]: true,\r\n\r\n                    })}\r\n                    style={bgStyle}\r\n                />\r\n\r\n                {listTab?.map((tab, i) => (\r\n                    <li\r\n                        ref={(el) => (tabRefs.current[i] = el)}\r\n                        onClick={() => handleChangeActiveTab(i)}\r\n                        key={i}\r\n                        className={cn(\r\n                            \"px-8 py-2 relative  cursor-pointer border-0 transition-colors duration-500 z-10\",\r\n                            {\r\n                                [`${activeTab === i && 'font-medium'}`]: true,\r\n                                [`${activeTab === i ? \"text-primary\" : \"text-gray\"}`]: type === \"bordered\",\r\n                                [`${activeTab === i ? \"text-white\" : \"text-gray\"}`]: type === \"pilled\",\r\n                                [customeClass?.tabItem || \"\"]: true,\r\n                                [customeClass?.activeTabItem || \"\"]: activeTab === i,\r\n                                \"px-3\": layout === \"vertical\"\r\n                            }\r\n                        )}\r\n                    >\r\n                        {tab?.label}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <div className={cn({\r\n                \"transition-opacity duration-500 ease-in-out w-full \": true,\r\n                \"overflow-x-auto\": layout === \"vertical\"\r\n            })}>\r\n                {listTab[activeTab]?.content}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tabs;\r\n",
  "Filename": "import Badge from \"@components/ui/Badge\";\r\nimport Button from \"@components/ui/Button\";\r\nimport Tooltip from \"@components/ui/Tooltip\";\r\nimport { cn } from \"@lib/utils/helper\";\r\n\r\ninterface TProps {\r\n  name: string;\r\n  to?: string;\r\n  importFrom?: string;\r\n}\r\n\r\nconst Filename = (props: TProps) => {\r\n  const { name, to, importFrom } = props;\r\n  const tooltipMessage = importFrom ? \"import from \" + importFrom : \"\";\r\n\r\n  const Label = (\r\n    <Tooltip text={tooltipMessage} customeClass={{ tooltip: \"before:min-w-[10rem]\" }}>\r\n      <Badge\r\n        label={name}\r\n        variant={\"soft-warning\"}\r\n        className={cn({\r\n          underline: to,\r\n        })}\r\n      />\r\n    </Tooltip>\r\n  );\r\n  return to ? <Button className=\"!inline-block\" label={Label} to={to} variant={\"link-black\"} target=\"_blank\" /> : Label;\r\n};\r\n\r\nexport default Filename;\r\n",
  "Here": "import Button from \"@components/ui/Button\";\r\n\r\ninterface TProps {\r\n  to: string;\r\n}\r\n\r\nconst Here = (props: TProps) => {\r\n  const { to } = props;\r\n  return <Button label=\"here\" to={to} target=\"_blank\" />;\r\n};\r\n\r\nexport default Here;\r\n",
  "Pathname": "import Button from \"@components/ui/Button\";\r\n\r\ninterface TProps {\r\n    path: string;\r\n    to?: string;\r\n}\r\n\r\nconst Pathname = (props: TProps) => {\r\n    const { path, to } = props\r\n\r\n    const Label = <span className=\"italic\">{path}</span>\r\n\r\n    return to ? <Button label={Label} to=\"to\" variant={\"solid-white\"} /> : Label\r\n}\r\n\r\nexport default Pathname",
  "ThreeDotMacBook": "import { HTMLProps } from \"react\"\r\n\r\ninterface TProps extends HTMLProps<HTMLDivElement> {\r\n\r\n}\r\n\r\nconst ThreeDotMacBook = (props: TProps) => {\r\n    const { className, ...attrs } = props\r\n    return (\r\n        <div className={` flex gap-2 top-0 left-0 w-fit ${className}`} {...attrs}>\r\n            <div className='w-4 h-4 bg-error rounded-full'></div>\r\n            <div className='w-4 h-4 bg-warning rounded-full'></div>\r\n            <div className='w-4 h-4 bg-success rounded-full'></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThreeDotMacBook",
  "Timeline": "import { IconCalender } from \"@assets/icons\";\r\nimport { cn } from \"@lib/utils/helper\";\r\n\r\ninterface TProps {\r\n    variant?: \"v1\" | \"v2\"\r\n    listStep: {\r\n        title?: string | React.ReactNode;\r\n        subtitle?: string | React.ReactNode;\r\n        description?: string | React.ReactNode;\r\n    }[];\r\n    customeClass?: {\r\n        container?: string;\r\n        containerStep?: string;\r\n        containerContent?: string;\r\n        containerIcon?: string;\r\n        lineBorder?: string;\r\n    };\r\n    customeIcon?: React.ReactNode;\r\n}\r\n\r\nconst Timeline = (props: TProps) => {\r\n    const { listStep, variant = \"v1\", customeClass, customeIcon } = props\r\n\r\n    const Content = (data: TProps[\"listStep\"][0], i: number, position: \"left\" | \"right\") => (\r\n        <div className={cn({\r\n            'w-[20rem] mb-8 \"opacity-0\"}': true,\r\n            \"hidden md:block\": (position === \"left\") && variant === \"v1\",\r\n            'md:opacity-0': ((i % 2 == 0 && position === \"right\") || (i % 2 !== 0 && position === \"left\")) && variant === \"v1\",\r\n            [customeClass?.containerContent || '']: customeClass?.containerContent\r\n        })}>\r\n            {\r\n                variant === \"v1\" && <p className=\"text-body-small\">{data?.subtitle}</p>\r\n            }\r\n\r\n            <p className=\"text-body-medium text-wrap text-black font-medium\">{data.title}</p>\r\n            <p className=\"mt-2\">{data?.description}</p>\r\n        </div>\r\n\r\n    )\r\n    return (\r\n        <div className={`w-fit h-full ${customeClass?.container}`}>\r\n            {\r\n                listStep?.map((data, i) => (\r\n                    <div key={i} className={`flex gap-8 ${customeClass?.containerStep}`}>\r\n\r\n                        {variant === \"v1\" && Content(data, i, \"left\")}\r\n                        {variant === \"v2\" && <p className=\"text-body-small font-medium\">{data?.subtitle}</p>}\r\n\r\n                        <div className={`table-cell w-[1px] border-primary-100 border items-stretch relative ${customeClass?.lineBorder}`}>\r\n                            <div className={`${customeClass?.containerIcon} p-2 flex items-center justify-center  right-1/2 transform translate-x-1/2  bg-primary-500 rounded-full  absolute`}>\r\n                                {\r\n                                    customeIcon ?? <IconCalender className=\"text-white \" />\r\n                                }\r\n                            </div>\r\n                        </div>\r\n\r\n                        {Content(data, i, \"right\")}\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timeline",
  "Toggle": "import { IconMoon, IconSun } from \"@assets/icons\";\r\nimport { cn } from \"@lib/utils/helper\";\r\n\r\ntype TProps = {\r\n  value: boolean;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  variant? : \"toggle\" |\"dark-light-mood\"\r\n}\r\n\r\nconst Toggle = (props: TProps) => {\r\n  const { value, variant,onChange: handleOnChange} = props\r\n  return (\r\n    <label className=\"inline-flex items-center cursor-pointer\">\r\n      <input onChange={handleOnChange} type=\"checkbox\" checked={value} className=\"peer sr-only\" />\r\n      <div className={cn({\r\n        \"relative w-[4rem] h-[2.25rem] bg-gray-200 rounded-full peer  peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:absolute after:top-[3.5px] after:start-[3.5px] after:bg-white after:border-gray-300 after:border after:rounded-full after:w-[1.75rem] after:h-[1.75rem] after:transition-all  peer-checked:bg-primary\":true,\r\n        \"peer-checked:bg-black\":value&&variant===\"dark-light-mood\"\r\n      })}>\r\n        {\r\n          variant ===\"dark-light-mood\" && <>          \r\n          <span className=\"absolute z-[9] top-[0.55rem] left-[0.55rem] w-[1rem] h-[1rem]\">\r\n            <IconSun className={`${value?'icon-white-fill':'icon-primary-fill'}  left-[0.45rem]`}/>\r\n          </span>\r\n          <span  className=\"absolute z-[9] top-[0.55rem] right-[0.57rem] w-[1rem] h-[1rem]\">\r\n            <IconMoon className={`${value?'icon-primary-fill':'icon-white-fill'}  right-[0.45rem]`}/>\r\n          </span>\r\n          </>\r\n        }\r\n      </div>\r\n    </label>\r\n  )\r\n}\r\n\r\nexport default Toggle",
  "Tooltip": "interface TProps {\r\n  children: React.ReactNode;\r\n  text: string;\r\n  variant?: \"top\" | \"bottom\" | \"left\" | \"right\";\r\n  customeClass?: {\r\n    tooltip?: string;\r\n    rectangle?: string;\r\n  };\r\n}\r\n\r\nconst Tooltip = (props: TProps) => {\r\n  const { children, text, variant = \"top\", customeClass } = props;\r\n  return (\r\n    <span data-text={text} className={`${text && \"tooltip\"} ${customeClass?.tooltip} ${variant} inline-block relative w-fit p-1`}>\r\n      {children}\r\n      {text && <span className={`rectangle ${variant}  ${customeClass?.rectangle}`}></span>}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default Tooltip;\r\n"
};

export default codeStringComponentUi;
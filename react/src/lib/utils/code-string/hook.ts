const codeStringHook = {
  "useSidebar": "\r\n\r\nconst useSidebar = () => {\r\n\r\n    const handleToggleSidebar = () => {\r\n        const sidebarContainer = document.getElementById('container-sidebar') as HTMLDivElement\r\n        const sidebar = document.getElementById('sidebar') as HTMLDivElement\r\n        const sidebarOverlay = document.getElementById('overlay-sidebar') as HTMLDivElement\r\n        const iconClose = document.getElementById('icon-close') as HTMLDivElement\r\n\r\n        const isToggle = sidebarContainer?.classList.contains('md-show')\r\n\r\n        const listClassSidebarContainer = ['md-show', 'md-modal', 'md-fadein-scaleup', 'min-w-full',]\r\n        const listClassSidebar = ['!w-[20rem]', '!h-full', '!static', '!top-0', 'transition-all', 'duration-500']\r\n        const listClassOverlay = ['md-show']\r\n        const listClassIconClose = ['!flex', '!static', '!w-full', '!right-0']\r\n\r\n        if (isToggle) {\r\n            sidebarContainer?.classList.remove(...listClassSidebarContainer)\r\n            sidebar?.classList.remove(...listClassSidebar)\r\n            sidebarOverlay?.classList.remove(...listClassOverlay)\r\n            iconClose?.classList.remove(...listClassIconClose)\r\n        } else {\r\n            sidebarContainer?.classList.add(...listClassSidebarContainer)\r\n            sidebar?.classList.add(...listClassSidebar)\r\n            sidebarOverlay?.classList.add(...listClassOverlay)\r\n            iconClose?.classList.add(...listClassIconClose)\r\n\r\n        }\r\n\r\n    }\r\n    return {\r\n        handleToggleSidebar\r\n    }\r\n}\r\n\r\nexport default useSidebar",
  "useFormattedInput": "import { useRef } from 'react';\r\n\r\ninterface TProps {\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    formatPattern: string;\r\n    value: string;\r\n}\r\n\r\nconst useFormattedInput = (props: TProps) => {\r\n    const { onChange, formatPattern, value } = props\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const formatValue = (value: string, pattern: string): string => {\r\n        const digitsOnly = value.replace(/\\D/g, \"\");\r\n        let formattedValue = \"\";\r\n        let patternIndex = 0;\r\n        let valueIndex = 0;\r\n\r\n        while (valueIndex < digitsOnly.length && patternIndex < pattern.length) {\r\n            if (pattern[patternIndex] === \"X\") {\r\n                formattedValue += digitsOnly[valueIndex];\r\n                valueIndex++;\r\n            } else {\r\n                formattedValue += pattern[patternIndex];\r\n            }\r\n            patternIndex++;\r\n        }\r\n\r\n        return formattedValue;\r\n    };\r\n\r\n\r\n    const handleOnChangeFormattedValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const { selectionStart } = e.target;\r\n        let cursorPosition = selectionStart as number;\r\n        const valueDeleted = value[cursorPosition]\r\n        const valueRaw = e.target.value\r\n\r\n        const formattedValue = formatValue(valueRaw, formatPattern);\r\n        if (inputRef.current) {\r\n            const inputLengthDifference = formattedValue.length - e.target.value.length;\r\n            cursorPosition = (selectionStart as number) + inputLengthDifference;\r\n            if ([\",\", \"-\",\".\"]?.includes(valueDeleted)) {\r\n                cursorPosition -= 1\r\n            }\r\n        }\r\n        e.target.value = formattedValue;\r\n        onChange(e);\r\n        setTimeout(() => {\r\n            if (inputRef.current) {\r\n                inputRef.current.selectionStart = cursorPosition;\r\n                inputRef.current.selectionEnd = cursorPosition;\r\n            }\r\n        }, 0);\r\n    };\r\n\r\n    return { inputRef, handleOnChangeFormattedValue };\r\n};\r\n\r\nexport default useFormattedInput;\r\n",
  "useMenu": "import { useMatches } from \"react-router-dom\"\r\n\r\n\r\nconst useMenu = () => {\r\n    const matches = useMatches()\r\n    const pagesMatch = matches?.filter(page => page.pathname === location.pathname)\r\n    const currentPageData: any = pagesMatch?.[pagesMatch?.length - 1]?.handle\r\n\r\n    return {\r\n        ...currentPageData\r\n    }\r\n}\r\n\r\nexport default useMenu",
  "useOnClickOutside": "import { RefObject, useEffect } from \"react\";\r\nimport { isEmptyValue } from '@/lib/utils/helper';\r\n\r\ninterface TProps<T> {\r\n    handler: () => void;\r\n    ref: RefObject<T>;\r\n    refExceptions?: RefObject<T>[];\r\n\r\n}\r\n\r\nconst useOnClickOutside = <T extends HTMLElement>(props: TProps<T>) => {\r\n    const { ref, handler, refExceptions } = props\r\n    useEffect(() => {\r\n        const handleClickOutside = (event: MouseEvent | TouchEvent) => {\r\n            if (ref.current && !ref.current.contains(event.target as Node) && (isEmptyValue(refExceptions) ? true : !refExceptions?.some(exceptionRef => {\r\n                return exceptionRef.current?.contains(event.target as Node)\r\n            }))) {\r\n                handler();\r\n            }\r\n        };\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        document.addEventListener(\"touchstart\", handleClickOutside);\r\n\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n            document.removeEventListener(\"touchstart\", handleClickOutside);\r\n        };\r\n    }, [ref, handler]);\r\n};\r\n\r\nexport default useOnClickOutside;",
  "useTable": "import { TColumn, TObject, TResponseAPI, TSettingTable } from \"@types\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\ninterface TProps {\r\n    initialColumn: any;\r\n    initialData: any;\r\n    initialSetting: any;\r\n    onFetchData: () => Promise<TObject>\r\n}\r\n\r\nconst useTable = (props: TProps) => {\r\n    const { initialColumn, initialData, initialSetting, onFetchData: handleFetchData } = props\r\n    const [data, setData] = useState(initialData)\r\n\r\n    type TData = (typeof data)[0]\r\n\r\n    const [setting, setSetting] = useState<TSettingTable<TData>>({\r\n        currentPage: 1,\r\n        totalPage: 10,\r\n        ...initialSetting,\r\n    })\r\n\r\n    const columns: TColumn<TData, keyof TData>[] = React.useMemo(\r\n        () => initialColumn,\r\n        [initialColumn]\r\n    );\r\n\r\n    useEffect(() => {\r\n        handleOnChange()\r\n    }, [])\r\n\r\n    const handleOnChange = async (params?: TSettingTable<TData>) => {\r\n        const response: TResponseAPI = await handleFetchData()\r\n\r\n        if (response?.status) {\r\n            setData(response?.data)\r\n        }\r\n\r\n\r\n        params && setSetting(params)\r\n\r\n    }\r\n\r\n    return {\r\n        setting,\r\n        columns,\r\n        setData,\r\n        data,\r\n        handleOnChange,\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default useTable"
};

export default codeStringHook;